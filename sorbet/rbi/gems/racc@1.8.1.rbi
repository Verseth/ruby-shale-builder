# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `racc` gem.
# Please instead update this file by running `bin/tapioca gem racc`.


# source://racc//lib/racc/compat.rb#14
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
end

# source://racc//lib/racc/parser.rb#19
ParseError = Racc::ParseError

# source://racc//lib/racc/state.rb#928
class Racc::Accept
  # source://racc//lib/racc/state.rb#929
  def inspect; end
end

# The table of LALR actions. Actions are either of
# Shift, Reduce, Accept and Error.
#
# source://racc//lib/racc/state.rb#815
class Racc::ActionTable
  # @return [ActionTable] a new instance of ActionTable
  #
  # source://racc//lib/racc/state.rb#817
  def initialize(rt, st); end

  # Returns the value of attribute accept.
  #
  # source://racc//lib/racc/state.rb#878
  def accept; end

  # source://racc//lib/racc/state.rb#855
  def each_reduce(&block); end

  # source://racc//lib/racc/state.rb#874
  def each_shift(&block); end

  # Returns the value of attribute error.
  #
  # source://racc//lib/racc/state.rb#879
  def error; end

  # source://racc//lib/racc/state.rb#827
  def init; end

  # source://racc//lib/racc/state.rb#842
  def reduce(i); end

  # source://racc//lib/racc/state.rb#838
  def reduce_n; end

  # source://racc//lib/racc/state.rb#863
  def shift(i); end

  # source://racc//lib/racc/state.rb#859
  def shift_n; end
end

# source://racc//lib/racc/exception.rb#15
class Racc::CompileError < ::Racc::Error; end

# source://racc//lib/racc/info.rb#17
Racc::Copyright = T.let(T.unsafe(nil), String)

class Racc::CparseParams; end

# source://racc//lib/racc/debugflags.rb#15
class Racc::DebugFlags
  # @return [DebugFlags] a new instance of DebugFlags
  #
  # source://racc//lib/racc/debugflags.rb#34
  def initialize(parse = T.unsafe(nil), rule = T.unsafe(nil), token = T.unsafe(nil), state = T.unsafe(nil), la = T.unsafe(nil), prec = T.unsafe(nil), conf = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/debugflags.rb#53
  def any?; end

  # Returns the value of attribute la.
  #
  # source://racc//lib/racc/debugflags.rb#50
  def la; end

  # Returns the value of attribute parse.
  #
  # source://racc//lib/racc/debugflags.rb#46
  def parse; end

  # Returns the value of attribute prec.
  #
  # source://racc//lib/racc/debugflags.rb#51
  def prec; end

  # Returns the value of attribute rule.
  #
  # source://racc//lib/racc/debugflags.rb#47
  def rule; end

  # Returns the value of attribute state.
  #
  # source://racc//lib/racc/debugflags.rb#49
  def state; end

  # Returns the value of attribute status_logging.
  #
  # source://racc//lib/racc/debugflags.rb#57
  def status_logging; end

  # Returns the value of attribute token.
  #
  # source://racc//lib/racc/debugflags.rb#48
  def token; end

  class << self
    # source://racc//lib/racc/debugflags.rb#16
    def parse_option_string(s); end
  end
end

# source://racc//lib/racc/exception.rb#14
class Racc::Error < ::StandardError
  # source://racc//lib/racc/state.rb#935
  def inspect; end
end

# Represents a transition on the grammar.
# "Real goto" means a transition by nonterminal,
# but this class treats also terminal's.
# If one is a terminal transition, .ident returns nil.
#
# source://racc//lib/racc/state.rb#771
class Racc::Goto
  # @return [Goto] a new instance of Goto
  #
  # source://racc//lib/racc/state.rb#772
  def initialize(ident, sym, from, to); end

  # Returns the value of attribute from_state.
  #
  # source://racc//lib/racc/state.rb#781
  def from_state; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/state.rb#779
  def ident; end

  # source://racc//lib/racc/state.rb#784
  def inspect; end

  # Returns the value of attribute symbol.
  #
  # source://racc//lib/racc/state.rb#780
  def symbol; end

  # Returns the value of attribute to_state.
  #
  # source://racc//lib/racc/state.rb#782
  def to_state; end
end

# source://racc//lib/racc/grammar.rb#22
class Racc::Grammar
  extend ::Forwardable

  # @return [Grammar] a new instance of Grammar
  #
  # source://racc//lib/racc/grammar.rb#24
  def initialize(debug_flags = T.unsafe(nil)); end

  # source://racc//lib/racc/grammar.rb#42
  def [](x); end

  # Grammar Definition Interface
  #
  # @raise [ArgumentError]
  #
  # source://racc//lib/racc/grammar.rb#168
  def add(rule); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#173
  def added?(sym); end

  # @raise [CompileError]
  #
  # source://racc//lib/racc/grammar.rb#182
  def declare_precedence(assoc, syms); end

  # source://racc//lib/racc/grammar.rb#122
  def dfa; end

  # source://racc//lib/racc/grammar.rb#46
  def each(&block); end

  # source://racc//lib/racc/grammar.rb#52
  def each_index(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_nonterminal(*args, **_arg1, &block); end

  # source://racc//lib/racc/grammar.rb#46
  def each_rule(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_symbol(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each_terminal(*args, **_arg1, &block); end

  # source://racc//lib/racc/grammar.rb#94
  def each_useless_nonterminal; end

  # source://racc//lib/racc/grammar.rb#110
  def each_useless_rule; end

  # source://racc//lib/racc/grammar.rb#56
  def each_with_index(&block); end

  # source://racc//lib/racc/grammar.rb#187
  def end_precedence_declaration(reverse); end

  # Returns the value of attribute error_on_expect_mismatch.
  #
  # source://racc//lib/racc/grammar.rb#40
  def error_on_expect_mismatch; end

  # Sets the attribute error_on_expect_mismatch
  #
  # @param value the value to set the attribute error_on_expect_mismatch to.
  #
  # source://racc//lib/racc/grammar.rb#40
  def error_on_expect_mismatch=(_arg0); end

  # Computation
  #
  # @raise [CompileError]
  #
  # source://racc//lib/racc/grammar.rb#411
  def init; end

  # source://racc//lib/racc/grammar.rb#74
  def intern(value, dummy = T.unsafe(nil)); end

  # Returns the value of attribute n_expected_srconflicts.
  #
  # source://racc//lib/racc/grammar.rb#39
  def n_expected_srconflicts; end

  # Sets the attribute n_expected_srconflicts
  #
  # @param value the value to set the attribute n_expected_srconflicts to.
  #
  # source://racc//lib/racc/grammar.rb#39
  def n_expected_srconflicts=(_arg0); end

  # source://racc//lib/racc/grammar.rb#90
  def n_useless_nonterminals; end

  # source://racc//lib/racc/grammar.rb#106
  def n_useless_rules; end

  # source://racc//lib/racc/grammar.rb#118
  def nfa; end

  # source://racc//lib/racc/grammar.rb#82
  def nonterminal_base; end

  # source://racc//lib/racc/grammar.rb#132
  def parser_class; end

  # source://racc//lib/racc/grammar.rb#60
  def size; end

  # Returns the value of attribute start.
  #
  # source://racc//lib/racc/grammar.rb#37
  def start; end

  # @raise [CompileError]
  #
  # source://racc//lib/racc/grammar.rb#177
  def start_symbol=(s); end

  # source://racc//lib/racc/grammar.rb#128
  def state_transition_table; end

  # source://racc//lib/racc/grammar.rb#122
  def states; end

  # source://racc//lib/racc/grammar.rb#78
  def symbols; end

  # Returns the value of attribute symboltable.
  #
  # source://racc//lib/racc/grammar.rb#38
  def symboltable; end

  # source://racc//lib/racc/grammar.rb#64
  def to_s; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#86
  def useless_nonterminal_exist?; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#102
  def useless_rule_exist?; end

  # source://racc//lib/racc/grammar.rb#158
  def write_log(path); end

  private

  # source://racc//lib/racc/grammar.rb#506
  def _compute_expand(t, set, lock); end

  # source://racc//lib/racc/grammar.rb#432
  def add_start_rule; end

  # source://racc//lib/racc/grammar.rb#539
  def check_rules_nullable(rules); end

  # source://racc//lib/racc/grammar.rb#580
  def check_rules_useless(rules); end

  # source://racc//lib/racc/grammar.rb#552
  def check_symbols_nullable(symbols); end

  # source://racc//lib/racc/grammar.rb#593
  def check_symbols_useless(s); end

  # Sym#expand
  #
  # source://racc//lib/racc/grammar.rb#500
  def compute_expand(t); end

  # Rule#hash
  #
  # source://racc//lib/racc/grammar.rb#451
  def compute_hash; end

  # Sym#heads
  #
  # source://racc//lib/racc/grammar.rb#460
  def compute_heads; end

  # Sym#locate
  #
  # source://racc//lib/racc/grammar.rb#485
  def compute_locate; end

  # Sym#nullable?, Rule#nullable?
  #
  # source://racc//lib/racc/grammar.rb#526
  def compute_nullable; end

  # Sym#self_null?
  #
  # source://racc//lib/racc/grammar.rb#474
  def compute_nullable_0; end

  # Sym#useless?, Rule#useless?
  # FIXME: what means "useless"?
  #
  # source://racc//lib/racc/grammar.rb#566
  def compute_useless; end

  # Sym#terminal?
  #
  # source://racc//lib/racc/grammar.rb#467
  def determine_terminals; end

  # Rule#ident
  # LocationPointer#ident
  #
  # source://racc//lib/racc/grammar.rb#444
  def fix_ident; end

  class << self
    # Dynamic Generation Interface
    #
    # source://racc//lib/racc/grammar.rb#203
    def define(&block); end
  end
end

# source://racc//lib/racc/grammar.rb#209
class Racc::Grammar::DefinitionEnv
  # @return [DefinitionEnv] a new instance of DefinitionEnv
  #
  # source://racc//lib/racc/grammar.rb#210
  def initialize; end

  # source://racc//lib/racc/grammar.rb#284
  def _(&block); end

  # source://racc//lib/racc/grammar.rb#244
  def _add(target, x); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#264
  def _added?(sym); end

  # source://racc//lib/racc/grammar.rb#260
  def _delayed_add(rule); end

  # source://racc//lib/racc/grammar.rb#323
  def _intern(x); end

  # source://racc//lib/racc/grammar.rb#284
  def action(&block); end

  # source://racc//lib/racc/grammar.rb#268
  def flush_delayed; end

  # source://racc//lib/racc/grammar.rb#216
  def grammar; end

  # source://racc//lib/racc/grammar.rb#298
  def many(sym, &block); end

  # source://racc//lib/racc/grammar.rb#305
  def many1(sym, &block); end

  # source://racc//lib/racc/grammar.rb#233
  def method_missing(mid, *args, &block); end

  # source://racc//lib/racc/grammar.rb#280
  def null(&block); end

  # source://racc//lib/racc/grammar.rb#292
  def option(sym, default = T.unsafe(nil), &block); end

  # source://racc//lib/racc/grammar.rb#227
  def precedence_table(&block); end

  # source://racc//lib/racc/grammar.rb#312
  def separated_by(sep, sym, &block); end

  # source://racc//lib/racc/grammar.rb#316
  def separated_by1(sep, sym, &block); end

  # source://racc//lib/racc/grammar.rb#276
  def seq(*list, &block); end

  private

  # source://racc//lib/racc/grammar.rb#336
  def _defmetasyntax(type, id, action, &block); end

  # source://racc//lib/racc/grammar.rb#347
  def _register(target_name); end

  # source://racc//lib/racc/grammar.rb#358
  def _wrap(target_name, sym, block); end
end

# source://racc//lib/racc/grammar.rb#367
class Racc::Grammar::PrecedenceDefinitionEnv
  # @return [PrecedenceDefinitionEnv] a new instance of PrecedenceDefinitionEnv
  #
  # source://racc//lib/racc/grammar.rb#368
  def initialize(g); end

  # source://racc//lib/racc/grammar.rb#377
  def higher; end

  # source://racc//lib/racc/grammar.rb#394
  def left(*syms); end

  # source://racc//lib/racc/grammar.rb#384
  def lower; end

  # source://racc//lib/racc/grammar.rb#402
  def nonassoc(*syms); end

  # Returns the value of attribute reverse.
  #
  # source://racc//lib/racc/grammar.rb#375
  def reverse; end

  # source://racc//lib/racc/grammar.rb#398
  def right(*syms); end
end

# source://racc//lib/racc/grammar.rb#852
class Racc::GroupEndMark
  # @return [GroupEndMark] a new instance of GroupEndMark
  #
  # source://racc//lib/racc/grammar.rb#853
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#857
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#863
  def lineno; end

  # source://racc//lib/racc/grammar.rb#857
  def name; end
end

# source://racc//lib/racc/grammar.rb#837
class Racc::GroupStartMark
  # @return [GroupStartMark] a new instance of GroupStartMark
  #
  # source://racc//lib/racc/grammar.rb#838
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#842
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#848
  def lineno; end

  # source://racc//lib/racc/grammar.rb#842
  def name; end
end

# An "indexed" set.  All items must respond to :ident.
#
# source://racc//lib/racc/iset.rb#16
class Racc::ISet
  # @return [ISet] a new instance of ISet
  #
  # source://racc//lib/racc/iset.rb#18
  def initialize(a = T.unsafe(nil)); end

  # source://racc//lib/racc/iset.rb#28
  def [](key); end

  # source://racc//lib/racc/iset.rb#32
  def []=(key, val); end

  # source://racc//lib/racc/iset.rb#24
  def add(i); end

  # source://racc//lib/racc/iset.rb#82
  def clear; end

  # source://racc//lib/racc/iset.rb#54
  def delete(key); end

  # source://racc//lib/racc/iset.rb#86
  def dup; end

  # source://racc//lib/racc/iset.rb#60
  def each(&block); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/iset.rb#78
  def empty?; end

  # source://racc//lib/racc/iset.rb#28
  def include?(key); end

  # source://racc//lib/racc/iset.rb#68
  def inspect; end

  # source://racc//lib/racc/iset.rb#28
  def key?(key); end

  # Returns the value of attribute set.
  #
  # source://racc//lib/racc/iset.rb#22
  def set; end

  # source://racc//lib/racc/iset.rb#74
  def size; end

  # source://racc//lib/racc/iset.rb#64
  def to_a; end

  # source://racc//lib/racc/iset.rb#68
  def to_s; end

  # source://racc//lib/racc/iset.rb#39
  def update(other); end

  # source://racc//lib/racc/iset.rb#49
  def update_a(a); end
end

# LALR item.  A set of rule and its lookahead tokens.
#
# source://racc//lib/racc/state.rb#791
class Racc::Item
  # @return [Item] a new instance of Item
  #
  # source://racc//lib/racc/state.rb#792
  def initialize(rule, la); end

  # source://racc//lib/racc/state.rb#800
  def each_la(tbl); end

  # Returns the value of attribute la.
  #
  # source://racc//lib/racc/state.rb#798
  def la; end

  # Returns the value of attribute rule.
  #
  # source://racc//lib/racc/state.rb#797
  def rule; end
end

# A set of rule and position in it's RHS.
# Note that the number of pointers is more than rule's RHS array,
# because pointer points right edge of the final symbol when reducing.
#
# source://racc//lib/racc/grammar.rb#889
class Racc::LocationPointer
  # @return [LocationPointer] a new instance of LocationPointer
  #
  # source://racc//lib/racc/grammar.rb#891
  def initialize(rule, i, sym); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#917
  def ==(ot); end

  # source://racc//lib/racc/grammar.rb#933
  def before(len); end

  # Returns the value of attribute symbol.
  #
  # source://racc//lib/racc/grammar.rb#901
  def dereference; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#917
  def eql?(ot); end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/grammar.rb#905
  def hash; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#923
  def head?; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/grammar.rb#905
  def ident; end

  # source://racc//lib/racc/grammar.rb#927
  def increment; end

  # Returns the value of attribute index.
  #
  # source://racc//lib/racc/grammar.rb#900
  def index; end

  # source://racc//lib/racc/grammar.rb#910
  def inspect; end

  # source://racc//lib/racc/grammar.rb#927
  def next; end

  # Returns the value of attribute reduce.
  #
  # source://racc//lib/racc/grammar.rb#907
  def reduce; end

  # Returns the value of attribute reduce.
  #
  # source://racc//lib/racc/grammar.rb#907
  def reduce?; end

  # Returns the value of attribute rule.
  #
  # source://racc//lib/racc/grammar.rb#899
  def rule; end

  # Returns the value of attribute symbol.
  #
  # source://racc//lib/racc/grammar.rb#901
  def symbol; end

  # source://racc//lib/racc/grammar.rb#910
  def to_s; end

  private

  # source://racc//lib/racc/grammar.rb#939
  def ptr_bug!; end
end

# source://racc//lib/racc/logfilegenerator.rb#15
class Racc::LogFileGenerator
  # @return [LogFileGenerator] a new instance of LogFileGenerator
  #
  # source://racc//lib/racc/logfilegenerator.rb#17
  def initialize(states, debug_flags = T.unsafe(nil)); end

  # source://racc//lib/racc/logfilegenerator.rb#92
  def action_out(f, state); end

  # source://racc//lib/racc/logfilegenerator.rb#133
  def outact(f, t, act); end

  # source://racc//lib/racc/logfilegenerator.rb#23
  def output(out); end

  # Warnings
  #
  # source://racc//lib/racc/logfilegenerator.rb#35
  def output_conflict(out); end

  # Rules
  #
  # source://racc//lib/racc/logfilegenerator.rb#170
  def output_rule(out); end

  # States
  #
  # source://racc//lib/racc/logfilegenerator.rb#66
  def output_state(out); end

  # Tokens
  #
  # source://racc//lib/racc/logfilegenerator.rb#184
  def output_token(out); end

  # source://racc//lib/racc/logfilegenerator.rb#48
  def output_useless(out); end

  # source://racc//lib/racc/logfilegenerator.rb#158
  def outrrconf(f, confs); end

  # source://racc//lib/racc/logfilegenerator.rb#150
  def outsrconf(f, confs); end

  # source://racc//lib/racc/logfilegenerator.rb#82
  def pointer_out(out, ptr); end

  # source://racc//lib/racc/logfilegenerator.rb#206
  def symbol_locations(locs); end
end

# source://racc//lib/racc/grammar.rb#822
class Racc::Many1Mark
  # @return [Many1Mark] a new instance of Many1Mark
  #
  # source://racc//lib/racc/grammar.rb#823
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#827
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#833
  def lineno; end

  # source://racc//lib/racc/grammar.rb#827
  def name; end
end

# source://racc//lib/racc/grammar.rb#807
class Racc::ManyMark
  # @return [ManyMark] a new instance of ManyMark
  #
  # source://racc//lib/racc/grammar.rb#808
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#812
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#818
  def lineno; end

  # source://racc//lib/racc/grammar.rb#812
  def name; end
end

# source://racc//lib/racc/grammar.rb#792
class Racc::OptionMark
  # @return [OptionMark] a new instance of OptionMark
  #
  # source://racc//lib/racc/grammar.rb#793
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#797
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#803
  def lineno; end

  # source://racc//lib/racc/grammar.rb#797
  def name; end
end

# source://racc//lib/racc/grammar.rb#777
class Racc::OrMark
  # @return [OrMark] a new instance of OrMark
  #
  # source://racc//lib/racc/grammar.rb#778
  def initialize(lineno); end

  # source://racc//lib/racc/grammar.rb#782
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#788
  def lineno; end

  # source://racc//lib/racc/grammar.rb#782
  def name; end
end

# source://racc//lib/racc/parser.rb#184
class Racc::Parser
  # source://racc//lib/racc/parser.rb#279
  def _racc_do_parse_rb(arg, in_debug); end

  # source://racc//lib/racc/parser.rb#479
  def _racc_do_reduce(arg, act); end

  # common
  #
  # source://racc//lib/racc/parser.rb#382
  def _racc_evalact(act, arg); end

  # source://racc//lib/racc/parser.rb#232
  def _racc_init_sysvars; end

  # source://racc//lib/racc/parser.rb#220
  def _racc_setup; end

  # source://racc//lib/racc/parser.rb#329
  def _racc_yyparse_rb(recv, mid, arg, c_debug); end

  # source://racc//lib/racc/parser.rb#262
  def do_parse; end

  # The method to fetch next token.
  # If you use #do_parse method, you must implement #next_token.
  #
  # The format of return value is [TOKEN_SYMBOL, VALUE].
  # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
  # for 'IDENT'.  ";" (String) for ';'.
  #
  # The final symbol (End of file) must be false.
  #
  # @raise [NotImplementedError]
  #
  # source://racc//lib/racc/parser.rb#275
  def next_token; end

  # This method is called when a parse error is found.
  #
  # ERROR_TOKEN_ID is an internal ID of token which caused error.
  # You can get string representation of this ID by calling
  # #token_to_str.
  #
  # ERROR_VALUE is a value of error token.
  #
  # value_stack is a stack of symbol values.
  # DO NOT MODIFY this object.
  #
  # This method raises ParseError by default.
  #
  # If this method returns, parsers enter "error recovering mode".
  #
  # @raise [ParseError]
  #
  # source://racc//lib/racc/parser.rb#535
  def on_error(t, val, vstack); end

  # source://racc//lib/racc/parser.rb#584
  def racc_accept; end

  # source://racc//lib/racc/parser.rb#589
  def racc_e_pop(state, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#596
  def racc_next_state(curstate, state); end

  # source://racc//lib/racc/parser.rb#602
  def racc_print_stacks(t, v); end

  # source://racc//lib/racc/parser.rb#611
  def racc_print_states(s); end

  # For debugging output
  #
  # source://racc//lib/racc/parser.rb#558
  def racc_read_token(t, tok, val); end

  # source://racc//lib/racc/parser.rb#571
  def racc_reduce(toks, sim, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#565
  def racc_shift(tok, tstack, vstack); end

  # source://racc//lib/racc/parser.rb#618
  def racc_token2str(tok); end

  # Convert internal ID of token symbol to the string.
  #
  # source://racc//lib/racc/parser.rb#624
  def token_to_str(t); end

  # Exit parser.
  # Return value is +Symbol_Value_Stack[0]+.
  #
  # source://racc//lib/racc/parser.rb#548
  def yyaccept; end

  # Leave error recovering mode.
  #
  # source://racc//lib/racc/parser.rb#553
  def yyerrok; end

  # Enter error recovering mode.
  # This method does not call #on_error.
  #
  # source://racc//lib/racc/parser.rb#542
  def yyerror; end

  # source://racc//lib/racc/parser.rb#324
  def yyparse(recv, mid); end

  class << self
    # source://racc//lib/racc/parser.rb#216
    def racc_runtime_type; end
  end
end

# source://racc//lib/racc/parser.rb#205
Racc::Parser::Racc_Main_Parsing_Routine = T.let(T.unsafe(nil), Symbol)

# source://racc//lib/racc/parser.rb#207
Racc::Parser::Racc_Runtime_Core_Version = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#187
Racc::Parser::Racc_Runtime_Core_Version_R = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#208
Racc::Parser::Racc_Runtime_Type = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#186
Racc::Parser::Racc_Runtime_Version = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/parser.rb#206
Racc::Parser::Racc_YY_Parse_Method = T.let(T.unsafe(nil), Symbol)

# source://racc//lib/racc/statetransitiontable.rb#261
class Racc::ParserClassGenerator
  # @return [ParserClassGenerator] a new instance of ParserClassGenerator
  #
  # source://racc//lib/racc/statetransitiontable.rb#263
  def initialize(states); end

  # source://racc//lib/racc/statetransitiontable.rb#268
  def generate; end

  private

  # source://racc//lib/racc/statetransitiontable.rb#293
  def define_actions(c); end
end

# source://racc//lib/racc/grammar.rb#867
class Racc::Prec
  # @return [Prec] a new instance of Prec
  #
  # source://racc//lib/racc/grammar.rb#868
  def initialize(symbol, lineno); end

  # source://racc//lib/racc/grammar.rb#873
  def inspect; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/grammar.rb#880
  def lineno; end

  # source://racc//lib/racc/grammar.rb#873
  def name; end

  # Returns the value of attribute symbol.
  #
  # source://racc//lib/racc/grammar.rb#879
  def symbol; end
end

# source://racc//lib/racc/state.rb#957
class Racc::RRconflict
  # @return [RRconflict] a new instance of RRconflict
  #
  # source://racc//lib/racc/state.rb#958
  def initialize(sid, high, low, tok); end

  # Returns the value of attribute high_prec.
  #
  # source://racc//lib/racc/state.rb#966
  def high_prec; end

  # Returns the value of attribute low_prec.
  #
  # source://racc//lib/racc/state.rb#967
  def low_prec; end

  # Returns the value of attribute stateid.
  #
  # source://racc//lib/racc/state.rb#965
  def stateid; end

  # source://racc//lib/racc/state.rb#970
  def to_s; end

  # Returns the value of attribute token.
  #
  # source://racc//lib/racc/state.rb#968
  def token; end
end

# source://racc//lib/racc/parser.rb#181
Racc::Racc_No_Extensions = T.let(T.unsafe(nil), FalseClass)

# source://racc//lib/racc/state.rb#901
class Racc::Reduce
  # @return [Reduce] a new instance of Reduce
  #
  # source://racc//lib/racc/state.rb#902
  def initialize(rule); end

  # source://racc//lib/racc/state.rb#922
  def decref; end

  # source://racc//lib/racc/state.rb#918
  def incref; end

  # source://racc//lib/racc/state.rb#914
  def inspect; end

  # Returns the value of attribute refn.
  #
  # source://racc//lib/racc/state.rb#908
  def refn; end

  # Returns the value of attribute rule.
  #
  # source://racc//lib/racc/state.rb#907
  def rule; end

  # source://racc//lib/racc/state.rb#910
  def ruleid; end
end

# source://racc//lib/racc/grammar.rb#608
class Racc::Rule
  # @return [Rule] a new instance of Rule
  #
  # source://racc//lib/racc/grammar.rb#610
  def initialize(target, syms, act); end

  # source://racc//lib/racc/grammar.rb#689
  def ==(other); end

  # source://racc//lib/racc/grammar.rb#693
  def [](idx); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#709
  def accept?; end

  # Returns the value of attribute action.
  #
  # source://racc//lib/racc/grammar.rb#627
  def action; end

  # source://racc//lib/racc/grammar.rb#717
  def each(&block); end

  # @yield [_self]
  # @yieldparam _self [Racc::Rule] the object that the method was called on
  #
  # source://racc//lib/racc/grammar.rb#638
  def each_rule(&block); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#701
  def empty?; end

  # Returns the value of attribute hash.
  #
  # source://racc//lib/racc/grammar.rb#645
  def hash; end

  # source://racc//lib/racc/grammar.rb#648
  def hash=(n); end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/grammar.rb#643
  def ident; end

  # Sets the attribute ident
  #
  # @param value the value to set the attribute ident to.
  #
  # source://racc//lib/racc/grammar.rb#643
  def ident=(_arg0); end

  # source://racc//lib/racc/grammar.rb#685
  def inspect; end

  # source://racc//lib/racc/grammar.rb#680
  def null=(n); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#679
  def nullable?; end

  # source://racc//lib/racc/grammar.rb#666
  def prec(sym, &block); end

  # source://racc//lib/racc/grammar.rb#658
  def precedence; end

  # source://racc//lib/racc/grammar.rb#662
  def precedence=(sym); end

  # Returns the value of attribute ptrs.
  #
  # source://racc//lib/racc/grammar.rb#646
  def ptrs; end

  # source://racc//lib/racc/grammar.rb#721
  def replace(src, dest); end

  # source://racc//lib/racc/grammar.rb#634
  def rule; end

  # source://racc//lib/racc/grammar.rb#697
  def size; end

  # Returns the value of attribute specified_prec.
  #
  # source://racc//lib/racc/grammar.rb#677
  def specified_prec; end

  # Sets the attribute specified_prec
  #
  # @param value the value to set the attribute specified_prec to.
  #
  # source://racc//lib/racc/grammar.rb#677
  def specified_prec=(_arg0); end

  # Returns the value of attribute symbols.
  #
  # source://racc//lib/racc/grammar.rb#626
  def symbols; end

  # Returns the value of attribute target.
  #
  # source://racc//lib/racc/grammar.rb#625
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://racc//lib/racc/grammar.rb#625
  def target=(_arg0); end

  # source://racc//lib/racc/grammar.rb#705
  def to_s; end

  # source://racc//lib/racc/grammar.rb#683
  def useless=(u); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#682
  def useless?; end

  # source://racc//lib/racc/grammar.rb#629
  def |(x); end
end

# source://racc//lib/racc/state.rb#940
class Racc::SRconflict
  # @return [SRconflict] a new instance of SRconflict
  #
  # source://racc//lib/racc/state.rb#941
  def initialize(sid, shift, reduce); end

  # Returns the value of attribute reduce.
  #
  # source://racc//lib/racc/state.rb#949
  def reduce; end

  # Returns the value of attribute shift.
  #
  # source://racc//lib/racc/state.rb#948
  def shift; end

  # Returns the value of attribute stateid.
  #
  # source://racc//lib/racc/state.rb#947
  def stateid; end

  # source://racc//lib/racc/state.rb#951
  def to_s; end
end

# source://racc//lib/racc/state.rb#884
class Racc::Shift
  # @return [Shift] a new instance of Shift
  #
  # source://racc//lib/racc/state.rb#885
  def initialize(goto); end

  # source://racc//lib/racc/state.rb#891
  def goto_id; end

  # Returns the value of attribute goto_state.
  #
  # source://racc//lib/racc/state.rb#889
  def goto_state; end

  # source://racc//lib/racc/state.rb#895
  def inspect; end
end

# source://racc//lib/racc/sourcetext.rb#15
class Racc::SourceText
  # @return [SourceText] a new instance of SourceText
  #
  # source://racc//lib/racc/sourcetext.rb#16
  def initialize(text, filename, lineno); end

  # Returns the value of attribute filename.
  #
  # source://racc//lib/racc/sourcetext.rb#23
  def filename; end

  # Returns the value of attribute lineno.
  #
  # source://racc//lib/racc/sourcetext.rb#24
  def lineno; end

  # source://racc//lib/racc/sourcetext.rb#30
  def location; end

  # Returns the value of attribute text.
  #
  # source://racc//lib/racc/sourcetext.rb#22
  def text; end

  # source://racc//lib/racc/sourcetext.rb#26
  def to_s; end
end

# A LALR state.
#
# source://racc//lib/racc/state.rb#611
class Racc::State
  # @return [State] a new instance of State
  #
  # source://racc//lib/racc/state.rb#613
  def initialize(ident, core); end

  # source://racc//lib/racc/state.rb#654
  def ==(oth); end

  # Returns the value of attribute action.
  #
  # source://racc//lib/racc/state.rb#642
  def action; end

  # source://racc//lib/racc/state.rb#671
  def check_la(la_rules); end

  # Returns the value of attribute closure.
  #
  # source://racc//lib/racc/state.rb#633
  def closure; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/state.rb#705
  def conflict?; end

  # Returns the value of attribute core.
  #
  # source://racc//lib/racc/state.rb#632
  def core; end

  # default action
  #
  # source://racc//lib/racc/state.rb#643
  def defact; end

  # default action
  #
  # source://racc//lib/racc/state.rb#643
  def defact=(_arg0); end

  # source://racc//lib/racc/state.rb#654
  def eql?(oth); end

  # Returns the value of attribute goto_table.
  #
  # source://racc//lib/racc/state.rb#635
  def goto_table; end

  # Returns the value of attribute gotos.
  #
  # source://racc//lib/racc/state.rb#636
  def gotos; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/state.rb#628
  def hash; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/state.rb#628
  def ident; end

  # source://racc//lib/racc/state.rb#648
  def inspect; end

  # source://racc//lib/racc/state.rb#722
  def la=(la); end

  # source://racc//lib/racc/state.rb#660
  def make_closure(core); end

  # source://racc//lib/racc/state.rb#758
  def n_rrconflicts; end

  # source://racc//lib/racc/state.rb#754
  def n_srconflicts; end

  # Returns the value of attribute ritems.
  #
  # source://racc//lib/racc/state.rb#639
  def ritems; end

  # source://racc//lib/racc/state.rb#732
  def rr_conflict(high, low, ctok); end

  # Returns the value of attribute rrconf.
  #
  # source://racc//lib/racc/state.rb#645
  def rrconf; end

  # source://racc//lib/racc/state.rb#709
  def rruleid(rule); end

  # Returns the value of attribute rrules.
  #
  # source://racc//lib/racc/state.rb#640
  def rrules; end

  # source://racc//lib/racc/state.rb#743
  def sr_conflict(shift, reduce); end

  # Returns the value of attribute srconf.
  #
  # source://racc//lib/racc/state.rb#646
  def srconf; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/state.rb#628
  def stateid; end

  # Returns the value of attribute stokens.
  #
  # source://racc//lib/racc/state.rb#638
  def stokens; end

  # source://racc//lib/racc/state.rb#648
  def to_s; end
end

# reopen
#
# source://racc//lib/racc/statetransitiontable.rb#17
class Racc::StateTransitionTable < ::Struct
  # @return [StateTransitionTable] a new instance of StateTransitionTable
  #
  # source://racc//lib/racc/statetransitiontable.rb#38
  def initialize(states); end

  # Returns the value of attribute action_check
  #
  # @return [Object] the current value of action_check
  def action_check; end

  # Sets the attribute action_check
  #
  # @param value [Object] the value to set the attribute action_check to.
  # @return [Object] the newly set value
  def action_check=(_); end

  # Returns the value of attribute action_default
  #
  # @return [Object] the current value of action_default
  def action_default; end

  # Sets the attribute action_default
  #
  # @param value [Object] the value to set the attribute action_default to.
  # @return [Object] the newly set value
  def action_default=(_); end

  # Returns the value of attribute action_pointer
  #
  # @return [Object] the current value of action_pointer
  def action_pointer; end

  # Sets the attribute action_pointer
  #
  # @param value [Object] the value to set the attribute action_pointer to.
  # @return [Object] the newly set value
  def action_pointer=(_); end

  # Returns the value of attribute action_table
  #
  # @return [Object] the current value of action_table
  def action_table; end

  # Sets the attribute action_table
  #
  # @param value [Object] the value to set the attribute action_table to.
  # @return [Object] the newly set value
  def action_table=(_); end

  # Returns the value of attribute debug_parser
  #
  # @return [Object] the current value of debug_parser
  def debug_parser; end

  # Sets the attribute debug_parser
  #
  # @param value [Object] the value to set the attribute debug_parser to.
  # @return [Object] the newly set value
  def debug_parser=(_); end

  # Returns the value of attribute goto_check
  #
  # @return [Object] the current value of goto_check
  def goto_check; end

  # Sets the attribute goto_check
  #
  # @param value [Object] the value to set the attribute goto_check to.
  # @return [Object] the newly set value
  def goto_check=(_); end

  # Returns the value of attribute goto_default
  #
  # @return [Object] the current value of goto_default
  def goto_default; end

  # Sets the attribute goto_default
  #
  # @param value [Object] the value to set the attribute goto_default to.
  # @return [Object] the newly set value
  def goto_default=(_); end

  # Returns the value of attribute goto_pointer
  #
  # @return [Object] the current value of goto_pointer
  def goto_pointer; end

  # Sets the attribute goto_pointer
  #
  # @param value [Object] the value to set the attribute goto_pointer to.
  # @return [Object] the newly set value
  def goto_pointer=(_); end

  # Returns the value of attribute goto_table
  #
  # @return [Object] the current value of goto_table
  def goto_table; end

  # Sets the attribute goto_table
  #
  # @param value [Object] the value to set the attribute goto_table to.
  # @return [Object] the newly set value
  def goto_table=(_); end

  # Returns the value of attribute grammar.
  #
  # source://racc//lib/racc/statetransitiontable.rb#47
  def grammar; end

  # Returns the value of attribute nt_base
  #
  # @return [Object] the current value of nt_base
  def nt_base; end

  # Sets the attribute nt_base
  #
  # @param value [Object] the value to set the attribute nt_base to.
  # @return [Object] the newly set value
  def nt_base=(_); end

  # source://racc//lib/racc/statetransitiontable.rb#49
  def parser_class; end

  # Returns the value of attribute reduce_n
  #
  # @return [Object] the current value of reduce_n
  def reduce_n; end

  # Sets the attribute reduce_n
  #
  # @param value [Object] the value to set the attribute reduce_n to.
  # @return [Object] the newly set value
  def reduce_n=(_); end

  # Returns the value of attribute reduce_table
  #
  # @return [Object] the current value of reduce_table
  def reduce_table; end

  # Sets the attribute reduce_table
  #
  # @param value [Object] the value to set the attribute reduce_table to.
  # @return [Object] the newly set value
  def reduce_table=(_); end

  # Returns the value of attribute shift_n
  #
  # @return [Object] the current value of shift_n
  def shift_n; end

  # Sets the attribute shift_n
  #
  # @param value [Object] the value to set the attribute shift_n to.
  # @return [Object] the newly set value
  def shift_n=(_); end

  # Returns the value of attribute states.
  #
  # source://racc//lib/racc/statetransitiontable.rb#46
  def states; end

  # Returns the value of attribute token_table
  #
  # @return [Object] the current value of token_table
  def token_table; end

  # Sets the attribute token_table
  #
  # @param value [Object] the value to set the attribute token_table to.
  # @return [Object] the newly set value
  def token_table=(_); end

  # Returns the value of attribute token_to_s_table
  #
  # @return [Object] the current value of token_to_s_table
  def token_to_s_table; end

  # Sets the attribute token_to_s_table
  #
  # @param value [Object] the value to set the attribute token_to_s_table to.
  # @return [Object] the newly set value
  def token_to_s_table=(_); end

  # source://racc//lib/racc/statetransitiontable.rb#53
  def token_value_table; end

  # Returns the value of attribute use_result_var
  #
  # @return [Object] the current value of use_result_var
  def use_result_var; end

  # Sets the attribute use_result_var
  #
  # @param value [Object] the value to set the attribute use_result_var to.
  # @return [Object] the newly set value
  def use_result_var=(_); end

  class << self
    def [](*_arg0); end

    # source://racc//lib/racc/statetransitiontable.rb#34
    def generate(states); end

    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://racc//lib/racc/statetransitiontable.rb#63
class Racc::StateTransitionTableGenerator
  # @return [StateTransitionTableGenerator] a new instance of StateTransitionTableGenerator
  #
  # source://racc//lib/racc/statetransitiontable.rb#65
  def initialize(states); end

  # source://racc//lib/racc/statetransitiontable.rb#247
  def act2actid(act); end

  # source://racc//lib/racc/statetransitiontable.rb#169
  def addent(all, arr, chkval, ptr); end

  # source://racc//lib/racc/statetransitiontable.rb#105
  def gen_action_tables(t, states); end

  # source://racc//lib/racc/statetransitiontable.rb#127
  def gen_goto_tables(t, grammar); end

  # source://racc//lib/racc/statetransitiontable.rb#70
  def generate; end

  # source://racc//lib/racc/statetransitiontable.rb#191
  def mkmapexp(arr); end

  # source://racc//lib/racc/statetransitiontable.rb#83
  def reduce_table(grammar); end

  # source://racc//lib/racc/statetransitiontable.rb#222
  def set_table(entries, dummy, tbl, chk, ptr); end

  # source://racc//lib/racc/statetransitiontable.rb#97
  def token_table(grammar); end
end

# source://racc//lib/racc/statetransitiontable.rb#185
Racc::StateTransitionTableGenerator::RE_DUP_MAX = T.let(T.unsafe(nil), Integer)

# A table of LALR states.
#
# source://racc//lib/racc/state.rb#21
class Racc::States
  include ::Enumerable
  extend ::Forwardable

  # @return [States] a new instance of States
  #
  # source://racc//lib/racc/state.rb#25
  def initialize(grammar, debug_flags = T.unsafe(nil)); end

  # source://racc//lib/racc/state.rb#51
  def [](i); end

  # Returns the value of attribute actions.
  #
  # source://racc//lib/racc/state.rb#39
  def actions; end

  # source://racc//lib/racc/state.rb#200
  def dfa; end

  # source://racc//lib/racc/state.rb#55
  def each(&block); end

  # source://racc//lib/racc/state.rb#61
  def each_index(&block); end

  # source://racc//lib/racc/state.rb#55
  def each_state(&block); end

  # Returns the value of attribute grammar.
  #
  # source://racc//lib/racc/state.rb#38
  def grammar; end

  # source://racc//lib/racc/state.rb#45
  def inspect; end

  # source://racc//lib/racc/state.rb#92
  def n_rrconflicts; end

  # source://racc//lib/racc/state.rb#84
  def n_srconflicts; end

  # source://racc//lib/racc/state.rb#106
  def nfa; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def nt_base(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def reduce_n(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/state.rb#88
  def rrconflict_exist?; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def shift_n(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/state.rb#76
  def should_error_on_expect_mismatch?; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/state.rb#71
  def should_report_srconflict?; end

  # source://racc//lib/racc/state.rb#41
  def size; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/state.rb#80
  def srconflict_exist?; end

  # source://racc//lib/racc/state.rb#96
  def state_transition_table; end

  # source://racc//lib/racc/state.rb#45
  def to_s; end

  private

  # source://racc//lib/racc/state.rb#321
  def addrel(tbl, i, item); end

  # source://racc//lib/racc/state.rb#158
  def addsym(table, sym, ptr); end

  # source://racc//lib/racc/state.rb#590
  def check_useless; end

  # source://racc//lib/racc/state.rb#210
  def compute_dfa; end

  # source://racc//lib/racc/state.rb#115
  def compute_nfa; end

  # source://racc//lib/racc/state.rb#165
  def core_to_state(core); end

  # source://racc//lib/racc/state.rb#317
  def create_tmap(size); end

  # source://racc//lib/racc/state.rb#352
  def digraph(map, relation); end

  # source://racc//lib/racc/state.rb#527
  def do_resolve_sr(stok, rtok); end

  # source://racc//lib/racc/state.rb#426
  def each_t(tbl, set); end

  # source://racc//lib/racc/state.rb#190
  def fingerprint(arr); end

  # source://racc//lib/racc/state.rb#129
  def generate_states(state); end

  # source://racc//lib/racc/state.rb#223
  def lookahead; end

  # source://racc//lib/racc/state.rb#568
  def pack(state); end

  # for debug
  #
  # source://racc//lib/racc/state.rb#394
  def print_atab(idx, tab); end

  # source://racc//lib/racc/state.rb#401
  def print_tab(idx, rel, tab); end

  # for debug
  #
  # source://racc//lib/racc/state.rb#411
  def print_tab_i(idx, rel, tab, i); end

  # for debug
  #
  # source://racc//lib/racc/state.rb#419
  def printb(i); end

  # source://racc//lib/racc/state.rb#329
  def record_path(begst, rule); end

  # resolve
  #
  # source://racc//lib/racc/state.rb#440
  def resolve(state); end

  # source://racc//lib/racc/state.rb#457
  def resolve_rr(state, r); end

  # source://racc//lib/racc/state.rb#476
  def resolve_sr(state, s); end

  # complete
  #
  # source://racc//lib/racc/state.rb#557
  def set_accept; end

  # source://racc//lib/racc/state.rb#340
  def transpose(rel); end

  # source://racc//lib/racc/state.rb#365
  def traverse(i, index, vertices, map, relation); end
end

# source://racc//lib/racc/state.rb#521
Racc::States::ASSOC = T.let(T.unsafe(nil), Hash)

# Stands terminal and nonterminal symbols.
#
# source://racc//lib/racc/grammar.rb#1049
class Racc::Sym
  # @return [Sym] a new instance of Sym
  #
  # source://racc//lib/racc/grammar.rb#1051
  def initialize(value, dummyp); end

  # Returns the value of attribute assoc.
  #
  # source://racc//lib/racc/grammar.rb#1141
  def assoc; end

  # Sets the attribute assoc
  #
  # @param value the value to set the attribute assoc to.
  #
  # source://racc//lib/racc/grammar.rb#1141
  def assoc=(_arg0); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1104
  def dummy?; end

  # Returns the value of attribute expand.
  #
  # source://racc//lib/racc/grammar.rb#1178
  def expand; end

  def expand=(v); end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/grammar.rb#1098
  def hash; end

  # cache
  #
  # source://racc//lib/racc/grammar.rb#1161
  def heads; end

  # Returns the value of attribute ident.
  #
  # source://racc//lib/racc/grammar.rb#1098
  def ident; end

  def ident=(v); end

  # source://racc//lib/racc/grammar.rb#1143
  def inspect; end

  # Returns the value of attribute locate.
  #
  # source://racc//lib/racc/grammar.rb#1162
  def locate; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1112
  def nonterminal?; end

  # source://racc//lib/racc/grammar.rb#1174
  def null=(n); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1170
  def nullable?; end

  # Returns the value of attribute precedence.
  #
  # source://racc//lib/racc/grammar.rb#1140
  def precedence; end

  # Sets the attribute precedence
  #
  # @param value the value to set the attribute precedence to.
  #
  # source://racc//lib/racc/grammar.rb#1140
  def precedence=(_arg0); end

  # source://racc//lib/racc/grammar.rb#1153
  def rule; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1164
  def self_null?; end

  # source://racc//lib/racc/grammar.rb#1134
  def serialize; end

  # Sets the attribute serialized
  #
  # @param value the value to set the attribute serialized to.
  #
  # source://racc//lib/racc/grammar.rb#1138
  def serialized=(_arg0); end

  # source://racc//lib/racc/grammar.rb#1122
  def should_terminal; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1126
  def should_terminal?; end

  def snull=(v); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1130
  def string_symbol?; end

  # source://racc//lib/racc/grammar.rb#1116
  def term=(t); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1108
  def terminal?; end

  # source://racc//lib/racc/grammar.rb#1143
  def to_s; end

  # source://racc//lib/racc/grammar.rb#1185
  def useless=(f); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#1181
  def useless?; end

  # Returns the value of attribute value.
  #
  # source://racc//lib/racc/grammar.rb#1102
  def value; end

  # source://racc//lib/racc/grammar.rb#1149
  def |(x); end

  class << self
    # source://racc//lib/racc/grammar.rb#1086
    def once_writer(nm); end
  end
end

# source://racc//lib/racc/grammar.rb#946
class Racc::SymbolTable
  include ::Enumerable

  # @return [SymbolTable] a new instance of SymbolTable
  #
  # source://racc//lib/racc/grammar.rb#950
  def initialize; end

  # source://racc//lib/racc/grammar.rb#962
  def [](id); end

  # Returns the value of attribute anchor.
  #
  # source://racc//lib/racc/grammar.rb#959
  def anchor; end

  # source://racc//lib/racc/grammar.rb#978
  def delete(sym); end

  # Returns the value of attribute dummy.
  #
  # source://racc//lib/racc/grammar.rb#958
  def dummy; end

  # source://racc//lib/racc/grammar.rb#989
  def each(&block); end

  # source://racc//lib/racc/grammar.rb#1005
  def each_nonterminal(&block); end

  # source://racc//lib/racc/grammar.rb#997
  def each_terminal(&block); end

  # Returns the value of attribute error.
  #
  # source://racc//lib/racc/grammar.rb#960
  def error; end

  # source://racc//lib/racc/grammar.rb#1009
  def fix; end

  # source://racc//lib/racc/grammar.rb#966
  def intern(val, dummy = T.unsafe(nil)); end

  # source://racc//lib/racc/grammar.rb#1001
  def nonterminals; end

  # Returns the value of attribute nt_base.
  #
  # source://racc//lib/racc/grammar.rb#983
  def nt_base; end

  # source://racc//lib/racc/grammar.rb#985
  def nt_max; end

  # Returns the value of attribute symbols.
  #
  # source://racc//lib/racc/grammar.rb#975
  def symbols; end

  # source://racc//lib/racc/grammar.rb#993
  def terminals(&block); end

  # Returns the value of attribute symbols.
  #
  # source://racc//lib/racc/grammar.rb#975
  def to_a; end

  private

  # source://racc//lib/racc/grammar.rb#1027
  def check_terminals; end

  # source://racc//lib/racc/grammar.rb#1021
  def fix_ident; end
end

# source://racc//lib/racc/grammar.rb#729
class Racc::UserAction
  # @return [UserAction] a new instance of UserAction
  #
  # source://racc//lib/racc/grammar.rb#748
  def initialize(src, proc); end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#764
  def empty?; end

  # source://racc//lib/racc/grammar.rb#768
  def inspect; end

  # source://racc//lib/racc/grammar.rb#768
  def name; end

  # Returns the value of attribute proc.
  #
  # source://racc//lib/racc/grammar.rb#754
  def proc; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#760
  def proc?; end

  # Returns the value of attribute source.
  #
  # source://racc//lib/racc/grammar.rb#753
  def source; end

  # @return [Boolean]
  #
  # source://racc//lib/racc/grammar.rb#756
  def source?; end

  class << self
    # source://racc//lib/racc/grammar.rb#742
    def empty; end

    # source://racc//lib/racc/grammar.rb#735
    def proc(pr = T.unsafe(nil), &block); end

    # source://racc//lib/racc/grammar.rb#731
    def source_text(src); end

    private

    def new(*_arg0); end
  end
end

# source://racc//lib/racc/info.rb#15
Racc::VERSION = T.let(T.unsafe(nil), String)

# source://racc//lib/racc/info.rb#16
Racc::Version = T.let(T.unsafe(nil), String)
