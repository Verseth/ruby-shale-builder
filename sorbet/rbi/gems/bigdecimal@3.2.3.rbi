# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bigdecimal` gem.
# Please instead update this file by running `bin/tapioca gem bigdecimal`.


# source://bigdecimal//lib/bigdecimal.rb#8
class BigDecimal < ::Numeric
  # call-seq:
  #    self ** other -> bigdecimal
  #
  #  Returns the \BigDecimal value of +self+ raised to power +other+:
  #
  #    b = BigDecimal('3.14')
  #    b ** 2              # => 0.98596e1
  #    b ** 2.0            # => 0.98596e1
  #    b ** Rational(2, 1) # => 0.98596e1
  #
  #  Related: BigDecimal#power.
  #
  # source://bigdecimal//lib/bigdecimal.rb#61
  def **(y); end

  # call-seq:
  #   power(n)
  #   power(n, prec)
  #
  # Returns the value raised to the power of n.
  #
  # Also available as the operator **.
  #
  # source://bigdecimal//lib/bigdecimal.rb#81
  def power(y, prec = T.unsafe(nil)); end

  # Returns the square root of the value.
  #
  # Result has at least prec significant digits.
  #
  # @raise [FloatDomainError]
  #
  # source://bigdecimal//lib/bigdecimal.rb#185
  def sqrt(prec); end
end

# source://bigdecimal//lib/bigdecimal.rb#9
module BigDecimal::Internal
  class << self
    # Coerce x to BigDecimal with the specified precision.
    # TODO: some methods (example: BigMath.exp) require more precision than specified to coerce.
    #
    # @raise [ArgumentError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#13
    def coerce_to_bigdecimal(x, prec, method_name); end

    # source://bigdecimal//lib/bigdecimal.rb#34
    def infinity_computation_result; end

    # source://bigdecimal//lib/bigdecimal.rb#41
    def nan_computation_result; end

    # @raise [ArgumentError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#25
    def validate_prec(prec, method_name, accept_zero: T.unsafe(nil)); end
  end
end

BigDecimal::VERSION = T.let(T.unsafe(nil), String)
