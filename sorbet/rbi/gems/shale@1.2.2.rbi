# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `shale` gem.
# Please instead update this file by running `bin/tapioca gem shale`.


# Main library namespace
#
# Shale uses adapters for parsing and serializing documents.
# For handling JSON, YAML, TOML and CSV, adapter must implement .load and .dump methods, so
# e.g for handling JSON, MultiJson works out of the box.
#
# Adapters for XML handling are more complicated and must conform to [@see shale/adapter/rexml]
# Shale provides adaters for most popular XML parsing libraries:
# Shale::Adapter::REXML, Shale::Adapter::Nokogiri and Shale::Adapter::Ox
#
# By default Shale::Adapter::REXML is used so no external dependencies are needed, but it's
# not as performant as Nokogiri or Ox, so you may want to change it.
#
# @api public
# @example setting MultiJSON for handling JSON documents
#   Shale.json_adapter = MultiJson
#   Shale.json_adapter # => MultiJson
# @example setting TOML adapter for handling TOML documents
#   require 'shale/adapter/toml_rb'
#
#   Shale.toml_adapter = Shale::Adapter::TomlRB
#   Shale.toml_adapter # => Shale::Adapter::TomlRB
# @example setting REXML adapter for handling XML documents
#   Shale.xml_adapter = Shale::Adapter::REXML
#   Shale.xml_adapter # => Shale::Adapter::REXML
# @example setting Nokogiri adapter for handling XML documents
#   require 'shale/adapter/nokogiri'
#
#   Shale.xml_adapter = Shale::Adapter::Nokogir
#   Shale.xml_adapter # => Shale::Adapter::Nokogir
# @example setting Ox adapter for handling XML documents
#   require 'shale/adapter/ox'
#
#   Shale.xml_adapter = Shale::Adapter::Ox
#   Shale.xml_adapter # => Shale::Adapter::Ox
# @example setting CSV adapter for handling CSV documents
#   require 'shale/adapter/csv'
#
#   Shale.csv_adapter = Shale::Adapter::CSV
#   Shale.csv_adapter # => Shale::Adapter::CSV
#
# source://shale//lib/shale/attribute.rb#3
module Shale
  class << self
    # Set CSV adapter
    #
    # @api public
    # @example setting adapter
    #   Shale.csv_adapter = Shale::Adapter::CSV
    # @example getting adapter
    #   Shale.csv_adapter
    #   # => Shale::Adapter::CSV
    # @param adapter [.load, .dump]
    #
    # source://shale//lib/shale.rb#113
    def csv_adapter; end

    # Set CSV adapter
    #
    # @api public
    # @example setting adapter
    #   Shale.csv_adapter = Shale::Adapter::CSV
    # @example getting adapter
    #   Shale.csv_adapter
    #   # => Shale::Adapter::CSV
    # @param adapter [.load, .dump]
    #
    # source://shale//lib/shale.rb#113
    def csv_adapter=(_arg0); end

    # Return JSON adapter. By default Shale::Adapter::JSON is used
    #
    # @api public
    # @example
    #   Shale.json_adapter
    #   # => Shale::Adapter::JSON
    # @return [.load, .dump]
    #
    # source://shale//lib/shale.rb#139
    def json_adapter; end

    # Set JSON adapter
    #
    # @api public
    # @example
    #   Shale.json_adapter = Shale::Adapter::JSON
    # @param adapter [.load, .dump]
    #
    # source://shale//lib/shale.rb#74
    def json_adapter=(_arg0); end

    # TOML adapter accessor. Available adapters are Shale::Adapter::Tomlib
    # and Shale::Adapter::TomRB
    #
    # @api public
    # @example setting adapter
    #   Shale.toml_adapter = Shale::Adapter::Tomlib
    # @example getting adapter
    #   Shale.toml_adapter
    #   # => Shale::Adapter::Tomlib
    # @param adapter [@see Shale::Adapter::Tomlib]
    #
    # source://shale//lib/shale.rb#99
    def toml_adapter; end

    # TOML adapter accessor. Available adapters are Shale::Adapter::Tomlib
    # and Shale::Adapter::TomRB
    #
    # @api public
    # @example setting adapter
    #   Shale.toml_adapter = Shale::Adapter::Tomlib
    # @example getting adapter
    #   Shale.toml_adapter
    #   # => Shale::Adapter::Tomlib
    # @param adapter [@see Shale::Adapter::Tomlib]
    #
    # source://shale//lib/shale.rb#99
    def toml_adapter=(_arg0); end

    # XML adapter accessor. Available adapters are Shale::Adapter::REXML,
    # Shale::Adapter::Nokogiri and Shale::Adapter::Ox
    #
    # @api public
    # @example setting adapter
    #   Shale.xml_adapter = Shale::Adapter::REXML
    # @example getting adapter
    #   Shale.xml_adapter
    #   # => Shale::Adapter::REXML
    # @param adapter [@see Shale::Adapter::REXML]
    #
    # source://shale//lib/shale.rb#128
    def xml_adapter; end

    # XML adapter accessor. Available adapters are Shale::Adapter::REXML,
    # Shale::Adapter::Nokogiri and Shale::Adapter::Ox
    #
    # @api public
    # @example setting adapter
    #   Shale.xml_adapter = Shale::Adapter::REXML
    # @example getting adapter
    #   Shale.xml_adapter
    #   # => Shale::Adapter::REXML
    # @param adapter [@see Shale::Adapter::REXML]
    #
    # source://shale//lib/shale.rb#128
    def xml_adapter=(_arg0); end

    # Return YAML adapter. By default YAML is used
    #
    # @api public
    # @example
    #   Shale.yaml_adapter
    #   # => YAML
    # @return [.load, .dump]
    #
    # source://shale//lib/shale.rb#152
    def yaml_adapter; end

    # Set YAML adapter
    #
    # @api public
    # @example
    #   Shale.yaml_adapter = YAML
    # @param adapter [.load, .dump]
    #
    # source://shale//lib/shale.rb#84
    def yaml_adapter=(_arg0); end
  end
end

# source://shale//lib/shale/adapter/json.rb#6
module Shale::Adapter; end

# JSON adapter
#
# @api public
#
# source://shale//lib/shale/adapter/json.rb#10
class Shale::Adapter::JSON
  class << self
    # Serialize Hash into JSON
    #
    # @api private
    # @param obj [Hash] Hash object
    # @param options [Hash]
    # @return [String]
    #
    # source://shale//lib/shale/adapter/json.rb#31
    def dump(obj, **options); end

    # Parse JSON into Hash
    #
    # @api private
    # @param json [String] JSON document
    # @param options [Hash]
    # @return [Hash]
    #
    # source://shale//lib/shale/adapter/json.rb#19
    def load(json, **options); end
  end
end

# Adapter error
#
# @api private
#
# source://shale//lib/shale/error.rb#141
class Shale::AdapterError < ::Shale::ShaleError; end

# Class representing object's attribute
#
# @api private
#
# source://shale//lib/shale/attribute.rb#7
class Shale::Attribute
  # Initialize Attribute object
  #
  # @api private
  # @param name [Symbol] Name of the attribute
  # @param type [Shale::Type::Value] Type of the attribute
  # @param collection [Boolean] Is this attribute a collection
  # @param default [Proc] Default value
  # @return [Attribute] a new instance of Attribute
  #
  # source://shale//lib/shale/attribute.rb#36
  def initialize(name, type, collection, default); end

  # Return wheter attribute is collection or not
  #
  # @api private
  # @return [Boolean]
  #
  # source://shale//lib/shale/attribute.rb#49
  def collection?; end

  # Return default
  #
  # @api private
  #
  # source://shale//lib/shale/attribute.rb#21
  def default; end

  # source://shale-builder/0.2.4/lib/shale/attribute.rb#13
  sig { returns(T.nilable(::String)) }
  def doc; end

  # source://shale-builder/0.2.4/lib/shale/attribute.rb#13
  def doc=(_arg0); end

  # Return name
  #
  # @api private
  #
  # source://shale//lib/shale/attribute.rb#11
  def name; end

  # Return setter name
  #
  # @api private
  #
  # source://shale//lib/shale/attribute.rb#26
  def setter; end

  # Return type
  #
  # @api private
  #
  # source://shale//lib/shale/attribute.rb#16
  def type; end
end

# Raised when receiver attribute is not defined
#
# @api private
#
# source://shale//lib/shale/error.rb#123
class Shale::AttributeNotDefinedError < ::Shale::ShaleError; end

# Error message displayed when CSV adapter is not set
#
# @api private
#
# source://shale//lib/shale/error.rb#44
Shale::CSV_ADAPTER_NOT_SET_MESSAGE = T.let(T.unsafe(nil), String)

# Error for trying to assign not callable object as an attribute's default
#
# @api private
#
# source://shale//lib/shale/error.rb#78
class Shale::DefaultNotCallableError < ::Shale::ShaleError
  # Initialize error object
  #
  # @api private
  # @param record [String]
  # @param attribute [String]
  # @return [DefaultNotCallableError] a new instance of DefaultNotCallableError
  #
  # source://shale//lib/shale/error.rb#85
  def initialize(record, attribute); end
end

# Error for passing incorrect arguments to map functions
#
# @api private
#
# source://shale//lib/shale/error.rb#99
class Shale::IncorrectMappingArgumentsError < ::Shale::ShaleError; end

# Error for passing incorrect model type
#
# @api private
#
# source://shale//lib/shale/error.rb#93
class Shale::IncorrectModelError < ::Shale::ShaleError; end

# Base class used for mapping
#
# @api public
# @example
#   class Address < Shale::Mapper
#   attribute :city, :string
#   attribute :street, :string
#   attribute :state, :string
#   attribute :zip, :string
#   end
#
#   class Person < Shale::Mapper
#   attribute :first_name, :string
#   attribute :last_name, :string
#   attribute :age, :integer
#   attribute :address, Address
#   end
#
#   person = Person.from_json(%{
#   {
#   "first_name": "John",
#   "last_name": "Doe",
#   "age": 55,
#   "address": {
#   "city": "London",
#   "street": "Oxford Street",
#   "state": "London",
#   "zip": "E1 6AN"
#   }
#   }
#   })
#
#   person.to_json
#
# source://shale//lib/shale/mapper.rb#46
class Shale::Mapper < ::Shale::Type::Complex
  # Initialize instance with properties
  #
  # @api public
  # @example
  #   Person.new(
  #   first_name: 'John',
  #   last_name: 'Doe',
  #   address: Address.new(city: 'London')
  #   )
  #   # => #<Person:0x00007f82768a2370
  #   @first_name="John",
  #   @last_name="Doe"
  #   @address=#<Address:0x00007fe9cf0f57d8 @city="London">>
  # @param props [Hash] Properties
  # @raise [UnknownAttributeError] when attribute is not defined on the class
  # @return [Mapper] a new instance of Mapper
  #
  # source://shale//lib/shale/mapper.rb#369
  def initialize(**props); end

  class << self
    # Define attribute on class
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer, default: -> { 1 }
    #   attribute :hobbies, :string, collection: true
    #   end
    #
    #   person = Person.new
    #
    #   person.first_name # => nil
    #   person.first_name = 'John'
    #   person.first_name # => 'John'
    #
    #   person.age # => 1
    #
    #   person.hobbies << 'Dancing'
    #   person.hobbies # => ['Dancing']
    # @param type [Symbol, Class<Shale::Type::Value>] Type of the attribute
    # @param default [Proc] Default value for the attribute
    # @param collection [Boolean] Is the attribute a collection
    # @param name [Symbol] Name of the attribute
    # @raise [DefaultNotCallableError] when attribute's default is not callable
    # @raise [UnknownTypeError] when type is a symbol and not found in the registry
    #
    # source://shale//lib/shale/mapper.rb#175
    def attribute(name, type, collection: T.unsafe(nil), default: T.unsafe(nil)); end

    # Return attributes Hash
    #
    # @api public
    # @return [Hash<Symbol, Shale::Attribute>]
    #
    # source://shale//lib/shale/mapper.rb#62
    def attributes; end

    # Define CSV mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   csv do
    #   map 'first_name', to: :first_name
    #   map 'last_name', to: :last_name
    #   map 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#318
    def csv(&block); end

    # Return CSV mapping object
    #
    # @api public
    # @return [Shale::Mapping::Dict]
    #
    # source://shale//lib/shale/mapper.rb#97
    def csv_mapping; end

    # Return Hash mapping object
    #
    # @api public
    # @return [Shale::Mapping::Dict]
    #
    # source://shale//lib/shale/mapper.rb#69
    def hash_mapping; end

    # Define Hash mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   hsh do
    #   map 'firstName', to: :first_name
    #   map 'lastName', to: :last_name
    #   map 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#222
    def hsh(&block); end

    # @api private
    # @private
    #
    # source://shale//lib/shale/mapper.rb#107
    def inherited(subclass); end

    # Define JSON mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   json do
    #   map 'firstName', to: :first_name
    #   map 'lastName', to: :last_name
    #   map 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#246
    def json(&block); end

    # Return JSON mapping object
    #
    # @api public
    # @return [Shale::Mapping::Dict]
    #
    # source://shale//lib/shale/mapper.rb#76
    def json_mapping; end

    # @api public
    #
    # source://shale//lib/shale/mapper.rb#136
    def model(klass = T.unsafe(nil)); end

    # Define TOML mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   toml do
    #   map 'first_name', to: :first_name
    #   map 'last_name', to: :last_name
    #   map 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#294
    def toml(&block); end

    # Return TOML mapping object
    #
    # @api public
    # @return [Shale::Mapping::Dict]
    #
    # source://shale//lib/shale/mapper.rb#90
    def toml_mapping; end

    # Define XML mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   xml do
    #   root 'Person'
    #   map_content to: :first_name
    #   map_element 'LastName', to: :last_name
    #   map_attribute 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#343
    def xml(&block); end

    # Return XML mapping object
    #
    # @api public
    # @return [Shale::Mapping::XML]
    #
    # source://shale//lib/shale/mapper.rb#104
    def xml_mapping; end

    # Define YAML mapping
    #
    # @api public
    # @example
    #   class Person < Shale::Mapper
    #   attribute :first_name, :string
    #   attribute :last_name, :string
    #   attribute :age, :integer
    #
    #   yaml do
    #   map 'first_name', to: :first_name
    #   map 'last_name', to: :last_name
    #   map 'age', to: :age
    #   end
    #   end
    # @param block [Proc]
    #
    # source://shale//lib/shale/mapper.rb#270
    def yaml(&block); end

    # Return YAML mapping object
    #
    # @api public
    # @return [Shale::Mapping::Dict]
    #
    # source://shale//lib/shale/mapper.rb#83
    def yaml_mapping; end
  end
end

# source://shale//lib/shale/mapping/descriptor/dict.rb#4
module Shale::Mapping; end

# Class for handling attribute delegation
#
# @api private
#
# source://shale//lib/shale/mapping/delegates.rb#8
class Shale::Mapping::Delegates
  # Initialize instance
  #
  # @api private
  # @return [Delegates] a new instance of Delegates
  #
  # source://shale//lib/shale/mapping/delegates.rb#51
  def initialize; end

  # Add single value to delegate
  #
  # @api private
  # @param receiver_attribute [Shale::Attribute]
  # @param setter [String]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/delegates.rb#62
  def add(receiver_attribute, setter, value); end

  # Add collection to delegate
  #
  # @api private
  # @param receiver_attribute [Shale::Attribute]
  # @param setter [String]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/delegates.rb#73
  def add_collection(receiver_attribute, setter, value); end

  # Iterate over delegates and yield a block
  #
  # @api private
  # @param block [Proc]
  #
  # source://shale//lib/shale/mapping/delegates.rb#90
  def each(&block); end
end

# Class representing individual delegation
#
# @api private
#
# source://shale//lib/shale/mapping/delegates.rb#12
class Shale::Mapping::Delegates::Delegate
  # Initialize instance
  #
  # @api private
  # @param receiver_attribute [Shale::Attribute]
  # @param setter [String]
  # @param value [any]
  # @return [Delegate] a new instance of Delegate
  #
  # source://shale//lib/shale/mapping/delegates.rb#41
  def initialize(receiver_attribute, setter, value); end

  # Return receiver_attribute
  #
  # @api private
  # @return [Shale::Attribute]
  #
  # source://shale//lib/shale/mapping/delegates.rb#18
  def receiver_attribute; end

  # Return attribute setter on a delegate
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/delegates.rb#25
  def setter; end

  # Return value to set on a delegate
  #
  # @api private
  # @return [any]
  #
  # source://shale//lib/shale/mapping/delegates.rb#32
  def value; end
end

# source://shale//lib/shale/mapping/descriptor/dict.rb#5
module Shale::Mapping::Descriptor; end

# Class representing attribute mapping
#
# @api private
#
# source://shale//lib/shale/mapping/descriptor/dict.rb#9
class Shale::Mapping::Descriptor::Dict
  # Initialize instance
  #
  # @api private
  # @param name [String]
  # @param attribute [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param group [String, nil]
  # @param render_nil [true, false]
  # @param schema [Hash, nil]
  # @param methods [Hash, nil]
  # @return [Dict] a new instance of Dict
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#70
  def initialize(name:, attribute:, receiver:, methods:, group:, render_nil:, schema: T.unsafe(nil)); end

  # Return attribute name
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#22
  def attribute; end

  # Return group name
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#50
  def group; end

  # Return method symbol
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#36
  def method_from; end

  # Return method symbol
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#43
  def method_to; end

  # Return mapping name
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#15
  def name; end

  # Return receiver name
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#29
  def receiver; end

  # Check render_nil
  #
  # @api private
  # @return [true, false]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#89
  def render_nil?; end

  # Return schema hash
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/descriptor/dict.rb#57
  def schema; end
end

# Class representing XML attribute mapping
#
# @api private
#
# source://shale//lib/shale/mapping/descriptor/xml.rb#11
class Shale::Mapping::Descriptor::Xml < ::Shale::Mapping::Descriptor::Dict
  # Initialize instance
  #
  # @api private
  # @param name [String]
  # @param attribute [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param methods [Hash, nil]
  # @param namespace [Shale::Mapping::XmlNamespace]
  # @param cdata [true, false]
  # @param render_nil [true, false]
  # @param group [String, nil]
  # @return [Xml] a new instance of Xml
  #
  # source://shale//lib/shale/mapping/descriptor/xml.rb#38
  def initialize(name:, attribute:, receiver:, methods:, group:, namespace:, cdata:, render_nil:); end

  # Return cdata
  #
  # @api private
  # @return [true, false]
  #
  # source://shale//lib/shale/mapping/descriptor/xml.rb#24
  def cdata; end

  # Return namespace
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml.rb#17
  def namespace; end

  # Return name with XML namespace
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml.rb#75
  def namespaced_name; end

  # Return name with XML prefix
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml.rb#66
  def prefixed_name; end
end

# Class representing XML namespace
#
# @api private
#
# source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#9
class Shale::Mapping::Descriptor::XmlNamespace
  # Initialize instance
  #
  # @api private
  # @param name [String, nil]
  # @param prefix [String, nil]
  # @return [XmlNamespace] a new instance of XmlNamespace
  #
  # source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#30
  def initialize(name = T.unsafe(nil), prefix = T.unsafe(nil)); end

  # Return name
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#15
  def name; end

  # Return name
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#15
  def name=(_arg0); end

  # Return prefix
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#22
  def prefix; end

  # Return prefix
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/descriptor/xml_namespace.rb#22
  def prefix=(_arg0); end
end

# Mapping for dictionary serialization formats (Hash/JSON/YAML/TOML/CSV)
#
# @api private
#
# source://shale//lib/shale/mapping/dict.rb#11
class Shale::Mapping::Dict < ::Shale::Mapping::DictBase
  # Map group of keys to mapping methods
  #
  # @api private
  # @param from [Symbol]
  # @param to [Symbol]
  # @param block [Proc]
  #
  # source://shale//lib/shale/mapping/dict.rb#44
  def group(from:, to:, &block); end

  # Map key to attribute
  #
  # @api public
  # @param key [String] Document's key
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param render_nil [true, false, nil]
  # @param schema [Hash, nil]
  # @param using [Hash, nil]
  # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
  #
  # source://shale//lib/shale/mapping/dict.rb#24
  def map(key, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), render_nil: T.unsafe(nil), schema: T.unsafe(nil)); end

  # Set render_nil default
  #
  # @api private
  # @param val [true, false]
  #
  # source://shale//lib/shale/mapping/dict.rb#33
  def render_nil(val); end
end

# Base class for Mapping dictionary serialization formats (Hash/JSON/YAML/TOML/CSV)
#
# @api private
#
# source://shale//lib/shale/mapping/dict_base.rb#11
class Shale::Mapping::DictBase
  # Initialize instance
  #
  # @api private
  # @param render_nil_default [true, false]
  # @return [DictBase] a new instance of DictBase
  #
  # source://shale//lib/shale/mapping/dict_base.rb#31
  def initialize(render_nil_default: T.unsafe(nil)); end

  # Set the "finalized" instance variable to true
  #
  # @api private
  #
  # source://shale//lib/shale/mapping/dict_base.rb#85
  def finalize!; end

  # Query the "finalized" instance variable
  #
  # @api private
  # @return [truem false]
  #
  # source://shale//lib/shale/mapping/dict_base.rb#94
  def finalized?; end

  # Return keys mapping hash
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/dict_base.rb#17
  def keys; end

  # Map key to attribute
  #
  # @api private
  # @param key [String]
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param group [String, nil]
  # @param render_nil [true, false, nil]
  # @param schema [Hash, nil]
  # @param using [Hash, nil]
  # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
  #
  # source://shale//lib/shale/mapping/dict_base.rb#51
  def map(key, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), group: T.unsafe(nil), render_nil: T.unsafe(nil), schema: T.unsafe(nil)); end

  # Allow schema properties to be set on the object
  #
  # @api public
  # @param min_properties [Integer]
  # @param max_properties [Integer]
  # @param dependent_required [Hash]
  # @param additional_properties [Boolean]
  #
  # source://shale//lib/shale/mapping/dict_base.rb#73
  def properties(min_properties: T.unsafe(nil), max_properties: T.unsafe(nil), dependent_required: T.unsafe(nil), additional_properties: T.unsafe(nil)); end

  # Return hash for hash with properties for root Object
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/dict_base.rb#24
  def root; end

  private

  # @api private
  #
  # source://shale//lib/shale/mapping/dict_base.rb#99
  def initialize_dup(other); end
end

# Group for dictionary serialization formats (Hash/JSON/YAML/TOML/CSV)
#
# @api private
#
# source://shale//lib/shale/mapping/dict_group.rb#10
class Shale::Mapping::DictGroup < ::Shale::Mapping::DictBase
  # Initialize instance
  #
  # @api private
  # @param from [Symbol]
  # @param to [Symbol]
  # @return [DictGroup] a new instance of DictGroup
  #
  # source://shale//lib/shale/mapping/dict_group.rb#24
  def initialize(from, to); end

  # Map key to attribute
  #
  # @api private
  # @param key [String]
  #
  # source://shale//lib/shale/mapping/dict_group.rb#36
  def map(key); end

  # Return name of the group
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/dict_group.rb#16
  def name; end
end

# source://shale//lib/shale/mapping/group/dict.rb#5
module Shale::Mapping::Group; end

# Dict group descriptor
#
# @api private
#
# source://shale//lib/shale/mapping/group/dict.rb#9
class Shale::Mapping::Group::Dict
  # Initialize instance
  #
  # @api private
  # @param method_from [Symbol]
  # @param method_to [Symbol]
  # @return [Dict] a new instance of Dict
  #
  # source://shale//lib/shale/mapping/group/dict.rb#37
  def initialize(method_from, method_to); end

  # Add key-value pair to a group
  #
  # @api private
  # @param key [String]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/group/dict.rb#49
  def add(key, value); end

  # Return dict hash
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/group/dict.rb#29
  def dict; end

  # Return method_from
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/group/dict.rb#15
  def method_from; end

  # Return method_to
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/group/dict.rb#22
  def method_to; end
end

# Class representing mapping group for JSON/YAML/TOML
#
# @api private
#
# source://shale//lib/shale/mapping/group/dict_grouping.rb#11
class Shale::Mapping::Group::DictGrouping
  # Initialize instance
  #
  # @api private
  # @return [DictGrouping] a new instance of DictGrouping
  #
  # source://shale//lib/shale/mapping/group/dict_grouping.rb#15
  def initialize; end

  # Add a value to a group
  #
  # @api private
  # @param mapping [Shale::Mapping::Descriptor::Dict]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/group/dict_grouping.rb#25
  def add(mapping, value); end

  # Iterate over groups
  #
  # @api private
  # @param block [Proc]
  #
  # source://shale//lib/shale/mapping/group/dict_grouping.rb#35
  def each(&block); end
end

# Xml group descriptor
#
# @api private
#
# source://shale//lib/shale/mapping/group/xml.rb#11
class Shale::Mapping::Group::Xml < ::Shale::Mapping::Group::Dict
  # Initialize instance
  #
  # @api private
  # @param method_from [Symbol]
  # @param method_to [Symbol]
  # @return [Xml] a new instance of Xml
  #
  # source://shale//lib/shale/mapping/group/xml.rb#18
  def initialize(method_from, method_to); end

  # Add key-value pair to a group
  #
  # @api private
  # @param kind [Symbol]
  # @param key [String]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/group/xml.rb#30
  def add(kind, key, value); end
end

# Class representing mapping group for XML
#
# @api private
#
# source://shale//lib/shale/mapping/group/xml_grouping.rb#12
class Shale::Mapping::Group::XmlGrouping < ::Shale::Mapping::Group::DictGrouping
  # Add a value to a group
  #
  # @api private
  # @param mapping [Shale::Mapping::Descriptor::Dict]
  # @param kind [Symbol]
  # @param value [any]
  #
  # source://shale//lib/shale/mapping/group/xml_grouping.rb#20
  def add(mapping, kind, value); end
end

# source://shale//lib/shale/mapping/validator.rb#7
module Shale::Mapping::Validator
  class << self
    # Validate correctness of argument passed to map functions
    #
    # @api private
    # @param key [String]
    # @param to [Symbol, nil]
    # @param receiver [Symbol, nil]
    # @param using [Hash, nil]
    # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
    #
    # source://shale//lib/shale/mapping/validator.rb#18
    def validate_arguments(key, to, receiver, using); end

    # Validate correctness of namespace arguments
    #
    # @api private
    # @param key [String]
    # @param namespace [String, Symbol, nil]
    # @param prefix [String, Symbol, nil]
    # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
    #
    # source://shale//lib/shale/mapping/validator.rb#45
    def validate_namespace(key, namespace, prefix); end
  end
end

# Mapping for XML serialization format
#
# @api private
#
# source://shale//lib/shale/mapping/xml.rb#11
class Shale::Mapping::Xml < ::Shale::Mapping::XmlBase
  # Map group of nodes to mapping methods
  #
  # @api private
  # @param from [Symbol]
  # @param to [Symbol]
  # @param block [Proc]
  #
  # source://shale//lib/shale/mapping/xml.rb#105
  def group(from:, to:, &block); end

  # Map document's attribute to object's attribute
  #
  # @api private
  # @param attribute [String]
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  # @param render_nil [true, false, nil]
  #
  # source://shale//lib/shale/mapping/xml.rb#57
  def map_attribute(attribute, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), namespace: T.unsafe(nil), prefix: T.unsafe(nil), render_nil: T.unsafe(nil)); end

  # Map document's content to object's attribute
  #
  # @api private
  # @param to [Symbol]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param cdata [true, false]
  #
  # source://shale//lib/shale/mapping/xml.rb#85
  def map_content(to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), cdata: T.unsafe(nil)); end

  # Map element to attribute
  #
  # @api private
  # @param element [String]
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  # @param cdata [true, false]
  # @param render_nil [true, false, nil]
  #
  # source://shale//lib/shale/mapping/xml.rb#24
  def map_element(element, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), namespace: T.unsafe(nil), prefix: T.unsafe(nil), cdata: T.unsafe(nil), render_nil: T.unsafe(nil)); end

  # Set render_nil default
  #
  # @api private
  # @param val [true, false]
  #
  # source://shale//lib/shale/mapping/xml.rb#94
  def render_nil(val); end
end

# Base class for Mapping XML serialization format
#
# @api private
#
# source://shale//lib/shale/mapping/xml_base.rb#12
class Shale::Mapping::XmlBase
  # Initialize instance
  #
  # @api private
  # @return [XmlBase] a new instance of XmlBase
  #
  # source://shale//lib/shale/mapping/xml_base.rb#62
  def initialize; end

  # Return attributes mapping hash
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#25
  def attributes; end

  # Return content mapping
  #
  # @api private
  # @return [Symbol]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#32
  def content; end

  # Return default namespace
  #
  # @api private
  # @return [Shale::Mapping::Descriptor::XmlNamespace]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#39
  def default_namespace; end

  # Return elements mapping hash
  #
  # @api private
  # @return [Hash]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#18
  def elements; end

  # Set the "finalized" instance variable to true
  #
  # @api private
  #
  # source://shale//lib/shale/mapping/xml_base.rb#212
  def finalize!; end

  # Query the "finalized" instance variable
  #
  # @api private
  # @return [truem false]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#221
  def finalized?; end

  # Map document's attribute to object's attribute
  #
  # @api private
  # @param attribute [String]
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  # @param render_nil [true, false, nil]
  # @param group [String, nil]
  # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
  #
  # source://shale//lib/shale/mapping/xml_base.rb#138
  def map_attribute(attribute, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), group: T.unsafe(nil), namespace: T.unsafe(nil), prefix: T.unsafe(nil), render_nil: T.unsafe(nil)); end

  # Map document's content to object's attribute
  #
  # @api private
  # @param to [Symbol]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param group [String, nil]
  # @param cdata [true, false]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#174
  def map_content(to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), group: T.unsafe(nil), cdata: T.unsafe(nil)); end

  # Map element to attribute
  #
  # @api private
  # @param element [String]
  # @param to [Symbol, nil]
  # @param receiver [Symbol, nil]
  # @param using [Hash, nil]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  # @param cdata [true, false]
  # @param render_nil [true, false, nil]
  # @param group [String, nil]
  # @raise [IncorrectMappingArgumentsError] when arguments are incorrect
  #
  # source://shale//lib/shale/mapping/xml_base.rb#88
  def map_element(element, to: T.unsafe(nil), receiver: T.unsafe(nil), using: T.unsafe(nil), group: T.unsafe(nil), namespace: T.unsafe(nil), prefix: T.unsafe(nil), cdata: T.unsafe(nil), render_nil: T.unsafe(nil)); end

  # Set default namespace for root element
  #
  # @api private
  # @param name [String]
  # @param prefix [String]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#204
  def namespace(name, prefix); end

  # Return prefixed root
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#55
  def prefixed_root; end

  # Set the name for root element
  #
  # @api private
  # @param value [String] root's name
  #
  # source://shale//lib/shale/mapping/xml_base.rb#194
  def root(value); end

  # Return unprefixed root
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/xml_base.rb#46
  def unprefixed_root; end

  private

  # @api private
  #
  # source://shale//lib/shale/mapping/xml_base.rb#226
  def initialize_dup(other); end
end

# Group for XML serialization format
#
# @api private
#
# source://shale//lib/shale/mapping/xml_group.rb#10
class Shale::Mapping::XmlGroup < ::Shale::Mapping::XmlBase
  # Initialize instance
  #
  # @api private
  # @return [XmlGroup] a new instance of XmlGroup
  #
  # source://shale//lib/shale/mapping/xml_group.rb#21
  def initialize(from, to); end

  # Map document's attribute to object's attribute
  #
  # @api private
  # @param attribute [String]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  #
  # source://shale//lib/shale/mapping/xml_group.rb#52
  def map_attribute(attribute, namespace: T.unsafe(nil), prefix: T.unsafe(nil)); end

  # Map document's content to object's attribute
  #
  # @api private
  #
  # source://shale//lib/shale/mapping/xml_group.rb#65
  def map_content; end

  # Map element to attribute
  #
  # @api private
  # @param element [String]
  # @param namespace [String, nil]
  # @param prefix [String, nil]
  #
  # source://shale//lib/shale/mapping/xml_group.rb#35
  def map_element(element, namespace: T.unsafe(nil), prefix: T.unsafe(nil)); end

  # Return name of the group
  #
  # @api private
  # @return [String]
  #
  # source://shale//lib/shale/mapping/xml_group.rb#16
  def name; end
end

# Error for using incorrect type
#
# @api private
#
# source://shale//lib/shale/error.rb#105
class Shale::NotAShaleMapperError < ::Shale::ShaleError; end

# Error for registering class that is not a valid Type::Value
#
# @api private
#
# source://shale//lib/shale/error.rb#111
class Shale::NotATypeValueError < ::Shale::ShaleError; end

# Parsing error
#
# @api private
#
# source://shale//lib/shale/error.rb#135
class Shale::ParseError < ::Shale::ShaleError; end

# Schema compilation error
#
# @api private
#
# source://shale//lib/shale/error.rb#129
class Shale::SchemaError < ::Shale::ShaleError; end

# Shale base error class
#
# @api private
#
# source://shale//lib/shale/error.rb#72
class Shale::ShaleError < ::StandardError; end

# Error message displayed when TOML adapter is not set
#
# @api private
#
# source://shale//lib/shale/error.rb#6
Shale::TOML_ADAPTER_NOT_SET_MESSAGE = T.let(T.unsafe(nil), String)

# source://shale//lib/shale/type.rb#4
module Shale::Type
  class << self
    # Lookup a Shale::Type::Value class by type alias
    #
    # @api public
    # @example
    #
    #   Shale::Type.lookup(:unix_timestamp)
    #   # => UnixTimestamp
    # @param type [Symbol] Type alias
    # @raise [UnknownTypeError] when type is not registered
    # @return [Shale::Type::Value] Class registered for type
    #
    # source://shale//lib/shale/type.rb#47
    def lookup(type); end

    # Register a symbol alias for a Shale::Type::Value class
    #
    # @api public
    # @example
    #   class UnixTimestamp < Shale::Type::Value
    #   def self.cast(value)
    #   Time.at(value.to_i)
    #   end
    #   end
    #
    #   Shale::Type.register(:unix_timestamp, UnixTimestamp)
    # @param type [Symbol] Short type alias
    # @param klass [Shale::Type::Value] Class to register
    # @raise [NotATypeValueError] when klass is not a Shale::Type::Value
    #
    # source://shale//lib/shale/type.rb#23
    def register(type, klass); end
  end
end

# Cast value to Boolean
#
# @api public
#
# source://shale//lib/shale/type/boolean.rb#10
class Shale::Type::Boolean < ::Shale::Type::Value
  class << self
    # @api private
    # @param value [any] Value to cast
    # @return [Boolean, nil]
    #
    # source://shale//lib/shale/type/boolean.rb#28
    def cast(value); end
  end
end

# @api public
#
# source://shale//lib/shale/type/boolean.rb#11
Shale::Type::Boolean::FALSE_VALUES = T.let(T.unsafe(nil), Array)

# Build complex object. Don't use it directly.
# It serves as a base type class for @see Shale::Mapper
#
# @api private
#
# source://shale//lib/shale/type/complex.rb#15
class Shale::Type::Complex < ::Shale::Type::Value
  # Convert Object to CSV
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @param headers [true, false]
  # @param csv_options [Hash]
  # @return [String]
  #
  # source://shale//lib/shale/type/complex.rb#1066
  def to_csv(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), headers: T.unsafe(nil), **csv_options); end

  # Convert Object to Hash
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @return [Hash]
  #
  # source://shale//lib/shale/type/complex.rb#1001
  def to_hash(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

  # Convert Object to JSON
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @param pretty [true, false]
  # @param json_options [Hash]
  # @return [String]
  #
  # source://shale//lib/shale/type/complex.rb#1016
  def to_json(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), pretty: T.unsafe(nil), **json_options); end

  # Convert Object to TOML
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @param toml_options [Hash]
  # @return [String]
  #
  # source://shale//lib/shale/type/complex.rb#1051
  def to_toml(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **toml_options); end

  # Convert Object to XML
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @param declaration [true, false]
  # @param encoding [true, false, String]
  # @param pretty [true, false]
  # @return [String]
  #
  # source://shale//lib/shale/type/complex.rb#1089
  def to_xml(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), pretty: T.unsafe(nil), declaration: T.unsafe(nil), encoding: T.unsafe(nil)); end

  # Convert Object to YAML
  #
  # @api public
  # @param only [Array<Symbol>]
  # @param except [Array<Symbol>]
  # @param context [any]
  # @param yaml_options [Hash]
  # @return [String]
  #
  # source://shale//lib/shale/type/complex.rb#1037
  def to_yaml(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **yaml_options); end

  class << self
    # source://shale//lib/shale/type/complex.rb#146
    def as_csv(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#146
    def as_hash(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#146
    def as_json(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#141
    def as_toml(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert Object to XML document
    #
    # @api public
    # @param instance [any] Object to convert
    # @param node_name [String, nil] XML node name
    # @param doc [Shale::Adapter::<xml adapter>::Document, nil] Object to convert
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param only [Array<Symbol>]
    # @raise [IncorrectModelError]
    # @return [::REXML::Document, ::Nokogiri::Document, ::Ox::Document]
    #
    # source://shale//lib/shale/type/complex.rb#646
    def as_xml(instance, node_name = T.unsafe(nil), doc = T.unsafe(nil), _cdata = T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), version: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#146
    def as_yaml(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert CSV to Object
    #
    # @api public
    # @param csv [String] CSV to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param headers [true, false]
    # @param csv_options [Hash]
    # @param context [any]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#383
    def from_csv(csv, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), headers: T.unsafe(nil), **csv_options); end

    # @api private
    #
    # source://shale//lib/shale/type/complex.rb#29
    def from_hash(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert JSON to Object
    #
    # @api public
    # @param json [String] JSON to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param json_options [Hash]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#265
    def from_json(json, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **json_options); end

    # Convert TOML to Object
    #
    # @api public
    # @param toml [String] TOML to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param toml_options [Hash]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#342
    def from_toml(toml, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **toml_options); end

    # Convert XML to Object
    #
    # @api public
    # @param xml [String] XML to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @raise [AdapterError]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#622
    def from_xml(xml, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert YAML to Object
    #
    # @api public
    # @param yaml [String] YAML to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param yaml_options [Hash]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#304
    def from_yaml(yaml, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **yaml_options); end

    # source://shale//lib/shale/type/complex.rb#29
    def of_csv(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#29
    def of_hash(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#29
    def of_json(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#29
    def of_toml(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert XML document to Object
    #
    # @api public
    # @param element [Shale::Adapter::<XML adapter>::Node]
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @return [model instance]
    #
    # source://shale//lib/shale/type/complex.rb#442
    def of_xml(element, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # source://shale//lib/shale/type/complex.rb#29
    def of_yaml(hash, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert Object to CSV
    #
    # @api public
    # @param instance [model instance] Object to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param headers [true, false]
    # @param csv_options [Hash]
    # @param context [any]
    # @return [String]
    #
    # source://shale//lib/shale/type/complex.rb#409
    def to_csv(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), headers: T.unsafe(nil), **csv_options); end

    # @api private
    #
    # source://shale//lib/shale/type/complex.rb#146
    def to_hash(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end

    # Convert Object to JSON
    #
    # @api public
    # @param instance [model instance] Object to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param pretty [true, false]
    # @param json_options [Hash]
    # @param context [any]
    # @return [String]
    #
    # source://shale//lib/shale/type/complex.rb#286
    def to_json(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), pretty: T.unsafe(nil), **json_options); end

    # Convert Object to TOML
    #
    # @api public
    # @param instance [model instance] Object to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param toml_options [Hash]
    # @return [String]
    #
    # source://shale//lib/shale/type/complex.rb#363
    def to_toml(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **toml_options); end

    # Convert Object to XML
    #
    # @api public
    # @param instance [model instance] Object to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param declaration [true, false]
    # @param encoding [true, false, String]
    # @param pretty [true, false]
    # @raise [AdapterError]
    # @return [String]
    #
    # source://shale//lib/shale/type/complex.rb#867
    def to_xml(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), pretty: T.unsafe(nil), declaration: T.unsafe(nil), encoding: T.unsafe(nil)); end

    # Convert Object to YAML
    #
    # @api public
    # @param instance [model instance] Object to convert
    # @param only [Array<Symbol>]
    # @param except [Array<Symbol>]
    # @param context [any]
    # @param yaml_options [Hash]
    # @return [String]
    #
    # source://shale//lib/shale/type/complex.rb#324
    def to_yaml(instance, only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil), **yaml_options); end

    private

    # Get receiver for given mapping
    #
    # @api private
    # @param instance [any]
    # @param receiver_attribute [Shale::Attribute]
    # @return [Array]
    #
    # source://shale//lib/shale/type/complex.rb#974
    def get_receiver(instance, receiver_attribute); end

    # Get receiver attributes for given mapping
    #
    # @api private
    # @param mapping [Shale::Mapping::Descriptor::Dict]
    # @raise [AttributeNotDefinedError]
    # @raise [NotAShaleMapperError]
    # @return [Hash<Symbol, Shale::Attribute>]
    #
    # source://shale//lib/shale/type/complex.rb#943
    def get_receiver_attributes(mapping); end

    # Convert array with attributes to a hash
    #
    # @api private
    # @param ary [Array]
    # @return [Hash, nil]
    #
    # source://shale//lib/shale/type/complex.rb#921
    def to_partial_render_attributes(ary); end

    # Validate CSV adapter
    #
    # @api private
    # @raise [AdapterError]
    #
    # source://shale//lib/shale/type/complex.rb#910
    def validate_csv_adapter; end

    # Validate TOML adapter
    #
    # @api private
    # @raise [AdapterError]
    #
    # source://shale//lib/shale/type/complex.rb#892
    def validate_toml_adapter; end

    # Validate XML adapter
    #
    # @api private
    # @raise [AdapterError]
    #
    # source://shale//lib/shale/type/complex.rb#901
    def validate_xml_adapter; end
  end
end

# Cast value to Date
#
# @api public
#
# source://shale//lib/shale/type/date.rb#11
class Shale::Type::Date < ::Shale::Type::Value
  class << self
    # Use ISO 8601 format in CSV document
    #
    # @api private
    # @param value [Date]
    # @return [String]
    #
    # source://shale//lib/shale/type/date.rb#57
    def as_csv(value, **_arg1); end

    # Use ISO 8601 format in JSON document
    #
    # @api private
    # @param value [Date]
    # @return [String]
    #
    # source://shale//lib/shale/type/date.rb#35
    def as_json(value, **_arg1); end

    # Use ISO 8601 format in XML document
    #
    # @api private
    # @param value [Date] Value to convert to XML
    # @return [String]
    #
    # source://shale//lib/shale/type/date.rb#68
    def as_xml_value(value); end

    # Use ISO 8601 format in YAML document
    #
    # @api private
    # @param value [Date]
    # @return [String]
    #
    # source://shale//lib/shale/type/date.rb#46
    def as_yaml(value, **_arg1); end

    # @api private
    # @param value [any] Value to cast
    # @return [Date, nil]
    #
    # source://shale//lib/shale/type/date.rb#17
    def cast(value); end
  end
end

# Cast value to BigDecimal
#
# @api public
#
# source://shale//lib/shale/type/decimal.rb#10
class Shale::Type::Decimal < ::Shale::Type::Value
  class << self
    # @api public
    #
    # source://shale//lib/shale/type/decimal.rb#35
    def as_csv(value, **_arg1); end

    # @api public
    #
    # source://shale//lib/shale/type/decimal.rb#27
    def as_json(value, **_arg1); end

    # @api public
    #
    # source://shale//lib/shale/type/decimal.rb#39
    def as_toml(value, **_arg1); end

    # @api public
    #
    # source://shale//lib/shale/type/decimal.rb#43
    def as_xml_value(value, **_arg1); end

    # @api public
    #
    # source://shale//lib/shale/type/decimal.rb#31
    def as_yaml(value, **_arg1); end

    # @api private
    # @param value [String, Float, Integer, nil] Value to cast
    # @return [BigDecimal, nil]
    #
    # source://shale//lib/shale/type/decimal.rb#17
    def cast(value); end
  end
end

# Cast value to Float
#
# @api public
#
# source://shale//lib/shale/type/float.rb#10
class Shale::Type::Float < ::Shale::Type::Value
  class << self
    # @api private
    # @param value [#to_f, String, nil] Value to cast
    # @return [Float, nil]
    #
    # source://shale//lib/shale/type/float.rb#16
    def cast(value); end
  end
end

# Cast value to Integer
#
# @api public
#
# source://shale//lib/shale/type/integer.rb#10
class Shale::Type::Integer < ::Shale::Type::Value
  class << self
    # @api private
    # @param value [#to_i, nil] Value to cast
    # @return [Integer, nil]
    #
    # source://shale//lib/shale/type/integer.rb#16
    def cast(value); end
  end
end

# Cast value to String
#
# @api public
#
# source://shale//lib/shale/type/string.rb#10
class Shale::Type::String < ::Shale::Type::Value
  class << self
    # @api private
    # @param value [#to_s, nil] Value to cast
    # @return [String, nil]
    #
    # source://shale//lib/shale/type/string.rb#16
    def cast(value); end
  end
end

# Cast value to Time
#
# @api public
#
# source://shale//lib/shale/type/time.rb#11
class Shale::Type::Time < ::Shale::Type::Value
  class << self
    # Use ISO 8601 format in CSV document
    #
    # @api private
    # @param value [Time]
    # @return [String]
    #
    # source://shale//lib/shale/type/time.rb#57
    def as_csv(value, **_arg1); end

    # Use ISO 8601 format in JSON document
    #
    # @api private
    # @param value [Time]
    # @return [String]
    #
    # source://shale//lib/shale/type/time.rb#35
    def as_json(value, **_arg1); end

    # Use ISO 8601 format in XML document
    #
    # @api private
    # @param value [Time] Value to convert to XML
    # @return [String]
    #
    # source://shale//lib/shale/type/time.rb#68
    def as_xml_value(value); end

    # Use ISO 8601 format in YAML document
    #
    # @api private
    # @param value [Time]
    # @return [String]
    #
    # source://shale//lib/shale/type/time.rb#46
    def as_yaml(value, **_arg1); end

    # @api private
    # @param value [any] Value to cast
    # @return [Time, nil]
    #
    # source://shale//lib/shale/type/time.rb#17
    def cast(value); end
  end
end

# Base class for all types
#
# @api public
# @example
#   class MyType < Shale::Type::Value
#   ... overwrite methods as needed
#   end
#
# source://shale//lib/shale/type/value.rb#13
class Shale::Type::Value
  class << self
    # Convert value to form accepted by CSV document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#132
    def as_csv(value, **_arg1); end

    # Convert value to form accepted by Hash document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#44
    def as_hash(value, **_arg1); end

    # Convert value to form accepted by JSON document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#66
    def as_json(value, **_arg1); end

    # Convert value to form accepted by TOML document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#110
    def as_toml(value, **_arg1); end

    # Convert value to XML element
    #
    # @api private
    # @param value [#to_s] Value to convert to XML
    # @param name [String] Name of the element
    # @param doc [Shale::Adapter::<XML adapter>::Document] Document
    # @param cdata [true, false]
    #
    # source://shale//lib/shale/type/value.rb#166
    def as_xml(value, name, doc, cdata = T.unsafe(nil), **_arg4); end

    # Convert value to form accepted by XML document
    #
    # @api private
    # @param value [#to_s] Value to convert to XML
    # @return [String]
    #
    # source://shale//lib/shale/type/value.rb#154
    def as_xml_value(value); end

    # Convert value to form accepted by YAML document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#88
    def as_yaml(value, **_arg1); end

    # Cast raw value to a type. Base form just returns whatever it receives
    #
    # @api private
    # @param value [any] Value to cast
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#22
    def cast(value); end

    # Extract value from CSV document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#121
    def of_csv(value, **_arg1); end

    # Extract value from Hash document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#33
    def of_hash(value, **_arg1); end

    # Extract value from JSON document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#55
    def of_json(value, **_arg1); end

    # Extract value from TOML document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#99
    def of_toml(value, **_arg1); end

    # Extract value from XML document
    #
    # @api private
    # @param value [Shale::Adapter::<XML adapter>::Node]
    # @return [String]
    #
    # source://shale//lib/shale/type/value.rb#143
    def of_xml(node, **_arg1); end

    # Extract value from YAML document
    #
    # @api private
    # @param value [any]
    # @return [any]
    #
    # source://shale//lib/shale/type/value.rb#77
    def of_yaml(value, **_arg1); end
  end
end

# Error for assigning value to not existing attribute
#
# @api private
#
# source://shale//lib/shale/error.rb#57
class Shale::UnknownAttributeError < ::NoMethodError
  # Initialize error object
  #
  # @api private
  # @param record [String]
  # @param attribute [String]
  # @return [UnknownAttributeError] a new instance of UnknownAttributeError
  #
  # source://shale//lib/shale/error.rb#64
  def initialize(record, attribute); end
end

# Error for using unknown symbol type
#
# @api private
#
# source://shale//lib/shale/error.rb#117
class Shale::UnknownTypeError < ::Shale::ShaleError; end

# Utitlity functions
#
# @api private
#
# source://shale//lib/shale/utils.rb#7
module Shale::Utils
  class << self
    # Convert string to Ruby's class naming convention
    #
    # @api private
    # @example
    #   Shale::Utils.classify('foobar')
    #   # => 'Foobar'
    # @param val [String]
    #
    # source://shale//lib/shale/utils.rb#32
    def classify(str); end

    # Return value or nil if value is empty
    #
    # @api private
    # @example
    #   Shale::Utils.presence('FooBar') # => FooBar
    #   Shale::Utils.presence('') # => nil
    # @param value [String]
    #
    # source://shale//lib/shale/utils.rb#88
    def presence(value); end

    # Convert string to snake case
    #
    # @api private
    # @example
    #   Shale::Utils.snake_case('FooBar')
    #   # => 'foo_bar'
    # @param val [String]
    #
    # source://shale//lib/shale/utils.rb#54
    def snake_case(str); end

    # Convert word to under score
    #
    # @api private
    # @example
    #   Shale::Utils.underscore('FooBar') # => foo_bar
    #   Shale::Utils.underscore('Namespace::FooBar') # => foo_bar
    # @param word [String]
    #
    # source://shale//lib/shale/utils.rb#75
    def underscore(str); end

    # Upcase first letter of a string
    #
    # @api private
    # @example
    #   Shale::Utils.upcase_first('fooBar')
    #   # => 'FooBar'
    # @param val [String]
    #
    # source://shale//lib/shale/utils.rb#17
    def upcase_first(str); end
  end
end

# @api private
#
# source://shale//lib/shale/version.rb#5
Shale::VERSION = T.let(T.unsafe(nil), String)

# Error message displayed when XML adapter is not set
#
# @api private
#
# source://shale//lib/shale/error.rb#23
Shale::XML_ADAPTER_NOT_SET_MESSAGE = T.let(T.unsafe(nil), String)
